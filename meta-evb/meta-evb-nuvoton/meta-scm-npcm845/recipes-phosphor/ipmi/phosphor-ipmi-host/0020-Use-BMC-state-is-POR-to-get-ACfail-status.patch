From d29a482782e61e1486dfaaf729f2a52272c9cf89 Mon Sep 17 00:00:00 2001
From: Brian Ma <chma0@nuvoton.com>
Date: Mon, 22 Aug 2022 13:50:48 +0800
Subject: [PATCH 20/20] Use BMC state is POR to get ACfail status

---
 chassishandler.cpp | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

diff --git a/chassishandler.cpp b/chassishandler.cpp
index 31a1fd71..933edcde 100644
--- a/chassishandler.cpp
+++ b/chassishandler.cpp
@@ -1027,6 +1027,7 @@ std::optional<bool> getPowerStatus()
  */
 bool getACFailStatus()
 {
+    /* Intel ACboot is not in Openbmc dbus interface, settings may not work.
     constexpr const char* acBootObj =
         "/xyz/openbmc_project/control/host0/ac_boot";
     constexpr const char* acBootIntf = "xyz.openbmc_project.Common.ACBoot";
@@ -1047,6 +1048,32 @@ bool getACFailStatus()
             entry("PATH=%s", acBootObj), entry("INTERFACE=%s", acBootIntf));
     }
     return acFail == "True";
+    */
+    constexpr const char* bmcStateObj = "/xyz/openbmc_project/state/bmc0";
+    constexpr const char* bmcStateIntf = "xyz.openbmc_project.State.BMC";
+    std::string rebootCause;
+    bool acFail = false;
+    std::shared_ptr<sdbusplus::asio::connection> bus = getSdBus();
+    try
+    {
+        auto service = ipmi::getService(*bus, bmcStateIntf, bmcStateObj);
+
+        ipmi::Value variant = ipmi::getDbusProperty(
+            *bus, service, bmcStateObj, bmcStateIntf, "LastRebootCause");
+        rebootCause = std::get<std::string>(variant);
+        if (rebootCause == "xyz.openbmc_project.State.BMC.RebootCause.POR")
+        {
+            acFail = true;
+        }
+    }
+    catch (const std::exception& e)
+    {
+        log<level::ERR>("Failed to fetch LastRebootCause property",
+                        entry("ERROR=%s", e.what()),
+                        entry("PATH=%s", bmcStateObj),
+                        entry("INTERFACE=%s", bmcStateIntf));
+    }
+    return acFail;
 }
 } // namespace power_policy
 
-- 
2.34.1

