From 496f118d8c55b1f49ba6e1864e41def500d7a2af Mon Sep 17 00:00:00 2001
From: Ban Feng <kcfeng0@nuvoton.com>
Date: Tue, 28 Mar 2023 14:12:35 +0800
Subject: [PATCH] phosphor-gpio-monitor: add set Inventory.Item Present
 property

Signed-off-by: Ban Feng <kcfeng0@nuvoton.com>
---
 gpioMon.cpp     | 51 +++++++++++++++++++++++++++++++++++++++++++++++++
 gpioMon.hpp     | 16 ++++++++++++++--
 gpioMonMain.cpp | 12 +++++++++++-
 3 files changed, 76 insertions(+), 3 deletions(-)

diff --git a/gpioMon.cpp b/gpioMon.cpp
index 0b5bbd9..2446fb8 100644
--- a/gpioMon.cpp
+++ b/gpioMon.cpp
@@ -18,6 +18,7 @@
 
 #include <phosphor-logging/log.hpp>
 #include <sdbusplus/bus.hpp>
+#include <iostream>
 
 namespace phosphor
 {
@@ -29,11 +30,49 @@ constexpr auto SYSTEMD_SERVICE = "org.freedesktop.systemd1";
 constexpr auto SYSTEMD_ROOT = "/org/freedesktop/systemd1";
 constexpr auto SYSTEMD_INTERFACE = "org.freedesktop.systemd1.Manager";
 
+constexpr auto MAPPER_BUSNAME = "xyz.openbmc_project.ObjectMapper";
+constexpr auto MAPPER_PATH = "/xyz/openbmc_project/object_mapper";
+constexpr auto MAPPER_INTERFACE = "xyz.openbmc_project.ObjectMapper";
+
+constexpr auto PROPERTY_INTF = "org.freedesktop.DBus.Properties";
+constexpr auto INVENTORY_IFACE = "xyz.openbmc_project.Inventory.Item";
+constexpr auto PRESENT_PROP = "Present";
+
 constexpr auto falling = "FALLING";
 constexpr auto rising = "RISING";
 
 using namespace phosphor::logging;
 
+std::string GpioMonitor::getService(const std::string& path, const std::string& interface,
+                                    sdbusplus::bus_t& bus, bool logError)
+{
+    auto method = bus.new_method_call(MAPPER_BUSNAME, MAPPER_PATH,
+                                      MAPPER_INTERFACE, "GetObject");
+
+    method.append(path);
+    method.append(std::vector<std::string>({interface}));
+
+    auto reply = bus.call(method);
+
+    std::map<std::string, std::vector<std::string>> response;
+    reply.read(response);
+
+    if (response.empty())
+    {
+        if (logError)
+        {
+            log<level::ERR>(
+                std::string("Error in mapper response for getting service name "
+                            "PATH=" +
+                            path + " INTERFACE=" + interface)
+                    .c_str());
+        }
+        return std::string{};
+    }
+
+    return response.begin()->first;
+}
+
 void GpioMonitor::scheduleEventHandler()
 {
     gpioEventDescriptor.async_wait(
@@ -52,6 +91,7 @@ void GpioMonitor::scheduleEventHandler()
 
 void GpioMonitor::gpioEventHandler()
 {
+    bool gpioVal;
     gpiod_line_event gpioLineEvent;
 
     if (gpiod_line_event_read_fd(gpioEventDescriptor.native_handle(),
@@ -87,6 +127,7 @@ void GpioMonitor::gpioEventHandler()
         auto risingFind = targets.find(rising);
         if (risingFind != targets.end())
         {
+            gpioVal = false;
             targetsToStart = risingFind->second;
         }
     }
@@ -95,6 +136,7 @@ void GpioMonitor::gpioEventHandler()
         auto fallingFind = targets.find(falling);
         if (fallingFind != targets.end())
         {
+            gpioVal = true;
             targetsToStart = fallingFind->second;
         }
     }
@@ -103,6 +145,15 @@ void GpioMonitor::gpioEventHandler()
     if (!targetsToStart.empty())
     {
         auto bus = sdbusplus::bus::new_default();
+        auto service = getService(inventoryPath.c_str(), INVENTORY_IFACE, bus);
+        if (!service.empty())
+        {
+            auto methodSet = bus.new_method_call(service.c_str(), inventoryPath.c_str(),
+                                              PROPERTY_INTF, "Set");
+            methodSet.append(INVENTORY_IFACE, PRESENT_PROP, std::variant<bool>(gpioVal));
+            bus.call_noreply(methodSet);
+        }
+
         for (auto& tar : targetsToStart)
         {
             auto method = bus.new_method_call(SYSTEMD_SERVICE, SYSTEMD_ROOT,
diff --git a/gpioMon.hpp b/gpioMon.hpp
index a645e02..ab42940 100644
--- a/gpioMon.hpp
+++ b/gpioMon.hpp
@@ -7,6 +7,9 @@
 
 #include <map>
 #include <vector>
+#include <sdbusplus/bus.hpp>
+
+constexpr auto INVENTORY_OBJ_PATH = "/xyz/openbmc_project/inventory";
 
 namespace phosphor
 {
@@ -38,14 +41,16 @@ class GpioMonitor
      *                           value change
      *  @param[in] lineMsg     - GPIO line message to be used for log
      *  @param[in] continueRun - Whether to continue after event occur
+     *  @param[in] invpath     - Inventory Path
      */
     GpioMonitor(gpiod_line* line, gpiod_line_request_config& config,
                 boost::asio::io_context& io, const std::string& target,
                 const std::map<std::string, std::vector<std::string>>& targets,
-                const std::string& lineMsg, bool continueRun) :
+                const std::string& lineMsg, bool continueRun, const std::string& invpath) :
         gpioLine(line),
         gpioConfig(config), gpioEventDescriptor(io), target(target),
-        targets(targets), gpioLineMsg(lineMsg), continueAfterEvent(continueRun)
+        targets(targets), gpioLineMsg(lineMsg), continueAfterEvent(continueRun),
+        inventoryPath(INVENTORY_OBJ_PATH + invpath)
     {
         requestGPIOEvents();
     };
@@ -72,6 +77,9 @@ class GpioMonitor
     /** @brief If the monitor should continue after event */
     bool continueAfterEvent;
 
+    /** @brief Inventory Path */
+    std::string inventoryPath;
+
     /** @brief register handler for gpio event
      *
      *  @return  - 0 on success and -1 otherwise
@@ -83,6 +91,10 @@ class GpioMonitor
 
     /** @brief Handle the GPIO event and starts configured target */
     void gpioEventHandler();
+
+    /** @brief Get the service name from the mapper for the interface and path passed in. */
+    std::string getService(const std::string& path, const std::string& interface,
+                           sdbusplus::bus_t& bus, bool logError = true);
 };
 
 } // namespace gpio
diff --git a/gpioMonMain.cpp b/gpioMonMain.cpp
index 83e14b6..b1d4a4a 100644
--- a/gpioMonMain.cpp
+++ b/gpioMonMain.cpp
@@ -20,6 +20,7 @@
 #include <boost/asio/io_context.hpp>
 #include <nlohmann/json.hpp>
 #include <phosphor-logging/log.hpp>
+#include <iostream>
 
 #include <fstream>
 
@@ -99,6 +100,9 @@ int main(int argc, char** argv)
         /* flag to monitor */
         bool flag = false;
 
+        /* Inventory Path */
+        std::string invpath;
+
         /* target to start */
         std::string target;
 
@@ -166,6 +170,12 @@ int main(int argc, char** argv)
             flag = obj["Continue"];
         }
 
+        /* Get Inventory Path */
+        if (obj.find("Inventory") != obj.end())
+        {
+            invpath = obj["Inventory"];
+        }
+
         /* Parse out target argument. It is fine if the user does not
          * pass this if they are not interested in calling into any target
          * on meeting a condition.
@@ -183,7 +193,7 @@ int main(int argc, char** argv)
 
         /* Create a monitor object and let it do all the rest */
         gpios.push_back(std::make_unique<phosphor::gpio::GpioMonitor>(
-            line, config, io, target, targets, lineMsg, flag));
+            line, config, io, target, targets, lineMsg, flag, invpath));
     }
     io.run();
 
-- 
2.34.1

