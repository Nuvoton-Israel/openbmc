From fcdc6e4e7abbff4bdfab02ba5ec8d1155b8e4036 Mon Sep 17 00:00:00 2001
From: Ban Feng <kcfeng0@nuvoton.com>
Date: Tue, 4 Jul 2023 14:54:14 +0800
Subject: [PATCH] Add Replaceable, FirmwareVersion and OutputPowerWatts to
 PowerShelves

1. Add Replaceable for PowerSupply
2. Add FirmwareVersion for PowerDistribution
3. Add OutputPowerWatts for PowerSupplyMetrics

Besides, fix abnormal JSON data types for
{PowerSupply, PowerDistribution} Metrics

Signed-off-by: Ban Feng <kcfeng0@nuvoton.com>
---
 redfish-core/lib/power_distribution.hpp   | 30 +++++-----
 redfish-core/lib/power_supply.hpp         | 41 ++++++++------
 redfish-core/lib/power_supply_metrics.hpp | 67 +++++++++++++----------
 3 files changed, 76 insertions(+), 62 deletions(-)

diff --git a/redfish-core/lib/power_distribution.hpp b/redfish-core/lib/power_distribution.hpp
index 6914daa20..a9022f285 100644
--- a/redfish-core/lib/power_distribution.hpp
+++ b/redfish-core/lib/power_distribution.hpp
@@ -2,10 +2,11 @@
 
 #include "app.hpp"
 #include "registries/privilege_registry.hpp"
+#include "utils/chassis_utils.hpp"
 #include "utils/collection.hpp"
 #include "utils/dbus_utils.hpp"
 #include "utils/json_utils.hpp"
-#include "utils/chassis_utils.hpp"
+#include "utils/sw_utils.hpp"
 
 #include <boost/system/error_code.hpp>
 #include <boost/url/format.hpp>
@@ -67,6 +68,9 @@ inline void doPowerDistributionCollection(
         boost::urls::format("/redfish/v1/PowerEquipment/PowerShelves/{}/Metrics",
                             powerdistributionId);
 
+    sw_util::populateSoftwareInformation(asyncResp, sw_util::bmcPurpose,
+                                         "FirmwareVersion", false);
+
     constexpr std::array<std::string_view, 2> interfaces{
         "xyz.openbmc_project.Inventory.Item.Board",
         "xyz.openbmc_project.Inventory.Item.Chassis"};
@@ -179,11 +183,11 @@ inline void handlePowerDistributionGet(
 }
 
 inline void
-    getTemperatureReading(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
-                          const std::string& chassisId,
-                          const std::string& sensorPath,
-                          const std::string& id,
-                          const std::string& location)
+    getPowerDistributionMetricsReading(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+                                       const std::string& chassisId,
+                                       const std::string& sensorPath,
+                                       const std::string& id,
+                                       const std::string& location)
 {
     constexpr std::array<std::string_view, 1> interfaces = {
         "xyz.openbmc_project.Sensor.Value"};
@@ -215,13 +219,9 @@ inline void
 
             if (value)
             {
-                nlohmann::json::object_t item;
-                item["DataSourceUri"] = boost::urls::format(
+                asyncResp->res.jsonValue[location]["DataSourceUri"] = boost::urls::format(
                     "/redfish/v1/Chassis/{}/Sensors/{}", chassisId, id);
-                item["Reading"] = std::to_string(value);
-
-                nlohmann::json& sensorList = asyncResp->res.jsonValue[location];
-                sensorList.emplace_back(std::move(item));
+                asyncResp->res.jsonValue[location]["Reading"] = std::to_string(value);
             }
             });
         });
@@ -247,8 +247,8 @@ inline void
 
     if (sensorName.find("BUV") != std::string::npos)
     {
-        getTemperatureReading(asyncResp, powerdistributionId, sensorPath,
-                              id, "TemperatureCelsius");
+        getPowerDistributionMetricsReading(asyncResp, powerdistributionId, sensorPath,
+                                           id, "TemperatureCelsius");
     }
     else
     {
@@ -274,8 +274,6 @@ inline void
     asyncResp->res.jsonValue["@odata.id"] = boost::urls::format(
         "/redfish/v1/PowerEquipment/PowerShelves/{}/Metrics", powerdistributionId);
 
-    asyncResp->res.jsonValue["TemperatureCelsius"] = nlohmann::json::array();
-
     std::string sensorPath = *validChassisPath + "/all_sensors";
     dbus::utility::getAssociationEndPoints(
         sensorPath, [asyncResp, powerdistributionId](
diff --git a/redfish-core/lib/power_supply.hpp b/redfish-core/lib/power_supply.hpp
index 7aac36ac4..6cdc58f77 100644
--- a/redfish-core/lib/power_supply.hpp
+++ b/redfish-core/lib/power_supply.hpp
@@ -338,29 +338,36 @@ inline void
 }
 
 inline void
-    getPowerSupplyHotPluggable(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
-                               const std::string& service, const std::string& path)
+    getPowerSupplyReplaceable(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+                              const std::string& service, const std::string& path)
 {
-    sdbusplus::asio::getProperty<bool>(
+    sdbusplus::asio::getAllProperties(
         *crow::connections::systemBus, service, path,
-        "xyz.openbmc_project.Inventory.Decorator.Replaceable", "HotPluggable",
-        [asyncResp](const boost::system::error_code& ec, const bool value) {
-        if (ec)
+        "xyz.openbmc_project.Inventory.Decorator.Replaceable",
+        [asyncResp](const boost::system::error_code& /*ec*/,
+                    const dbus::utility::DBusPropertiesMap& propertiesList) {
+        const bool* replaceable = nullptr;
+        const bool* hotpluggable = nullptr;
+
+        const bool success = sdbusplus::unpackPropertiesNoThrow(
+            dbus_utils::UnpackErrorPrinter(), propertiesList,
+            "FieldReplaceable", replaceable,
+            "HotPluggable", hotpluggable);
+
+        if (!success)
         {
-            if (ec.value() != EBADR)
-            {
-                BMCWEB_LOG_ERROR << "DBUS response error for State";
-                messages::internalError(asyncResp->res);
-            }
+            messages::internalError(asyncResp->res);
             return;
         }
-        if (!value)
+
+        if (replaceable != nullptr)
         {
-            asyncResp->res.jsonValue["HotPluggable"] = "False";
+            asyncResp->res.jsonValue["Replaceable"] = *replaceable;
         }
-        else
+
+        if (hotpluggable != nullptr)
         {
-            asyncResp->res.jsonValue["HotPluggable"] = "True";
+            asyncResp->res.jsonValue["HotPluggable"] = *hotpluggable;
         }
         });
 }
@@ -548,8 +555,8 @@ inline void
                                  powerSupplyPath);
             getPowerSupplyAsset(asyncResp, object.begin()->first,
                                 powerSupplyPath);
-            getPowerSupplyHotPluggable(asyncResp, object.begin()->first,
-                                       powerSupplyPath);
+            getPowerSupplyReplaceable(asyncResp, object.begin()->first,
+                                      powerSupplyPath);
             });
 
         getEfficiencyPercent(asyncResp, powerSupplyPath);
diff --git a/redfish-core/lib/power_supply_metrics.hpp b/redfish-core/lib/power_supply_metrics.hpp
index ae2813bfb..e4334e2ef 100644
--- a/redfish-core/lib/power_supply_metrics.hpp
+++ b/redfish-core/lib/power_supply_metrics.hpp
@@ -23,13 +23,14 @@ inline void
                           const std::string& chassisId,
                           const std::string& powerSupplyPath,
                           const std::string& id,
-                          const std::string& location)
+                          const std::string& location,
+                          bool isArray)
 {
     constexpr std::array<std::string_view, 1> interfaces = {
         "xyz.openbmc_project.Sensor.Value"};
     dbus::utility::getDbusObject(
         powerSupplyPath, interfaces,
-        [asyncResp, chassisId, powerSupplyPath, id, location]
+        [asyncResp, chassisId, powerSupplyPath, id, location, isArray]
         (const boost::system::error_code& ec,
          const dbus::utility::MapperGetObject& object) {
         if (ec || object.empty())
@@ -41,7 +42,7 @@ inline void
         sdbusplus::asio::getProperty<double>(
             *crow::connections::systemBus, object.begin()->first, powerSupplyPath,
             "xyz.openbmc_project.Sensor.Value", "Value",
-            [asyncResp, chassisId, id, location]
+            [asyncResp, chassisId, id, location, isArray]
             (const boost::system::error_code& ec2, const double value) {
             if (ec2)
             {
@@ -53,20 +54,30 @@ inline void
                 return;
             }
 
+std::cerr << "location: " << location << "\n";
             if (value >= 0)
             {
-                nlohmann::json::object_t item;
-                item["DataSourceUri"] = boost::urls::format(
-                    "/redfish/v1/Chassis/{}/Sensors/{}", chassisId, id);
-
-                if ( location == "FanSpeedPercent" ) {
-                    item["SpeedRPM"] = std::to_string(value);
+                if (isArray)
+                {
+                    nlohmann::json::object_t item;
+                    item["DataSourceUri"] = boost::urls::format(
+                        "/redfish/v1/Chassis/{}/Sensors/{}", chassisId, id);
+
+                    if ( location == "FanSpeedPercent" ) {
+                        item["SpeedRPM"] = std::to_string(value);
+                    }
+                    else
+                        item["Reading"] = std::to_string(value);
+
+                    nlohmann::json& sensorList = asyncResp->res.jsonValue[location];
+                    sensorList.emplace_back(std::move(item));
                 }
                 else
-                    item["Reading"] = std::to_string(value);
-
-                nlohmann::json& sensorList = asyncResp->res.jsonValue[location];
-                sensorList.emplace_back(std::move(item));
+                {
+                    asyncResp->res.jsonValue[location]["DataSourceUri"] = boost::urls::format(
+                        "/redfish/v1/Chassis/{}/Sensors/{}", chassisId, id);
+                    asyncResp->res.jsonValue[location]["Reading"] = std::to_string(value);
+                }
             }
             });
         });
@@ -102,42 +113,48 @@ inline void
     if (sensorName.find("Input_Current") != std::string::npos)
     {
         getPowerSupplyReading(asyncResp, chassisId, powerSupplyPath,
-                              id, "InputCurrentAmps");
+                              id, "InputCurrentAmps", false);
     }
     else if (sensorName.find("Input_Power") != std::string::npos)
     {
         getPowerSupplyReading(asyncResp, chassisId, powerSupplyPath,
-                              id, "InputPowerWatts");
+                              id, "InputPowerWatts", false);
     }
     else if (sensorName.find("Input_Voltage") != std::string::npos)
     {
         getPowerSupplyReading(asyncResp, chassisId, powerSupplyPath,
-                              id, "InputVoltage");
+                              id, "InputVoltage", false);
     }
     else if (sensorName.find("Output_Current") != std::string::npos)
     {
+        asyncResp->res.jsonValue["RailCurrentAmps"] = nlohmann::json::array();
         getPowerSupplyReading(asyncResp, chassisId, powerSupplyPath,
-                              id, "RailCurrentAmps");
+                              id, "RailCurrentAmps", true);
     }
     else if (sensorName.find("Output_Power") != std::string::npos)
     {
+        asyncResp->res.jsonValue["RailPowerWatts"] = nlohmann::json::array();
         getPowerSupplyReading(asyncResp, chassisId, powerSupplyPath,
-                              id, "RailPowerWatts");
+                              id, "RailPowerWatts", true);
     }
     else if (sensorName.find("Output_Voltage") != std::string::npos)
     {
+        asyncResp->res.jsonValue["RailVoltage"] = nlohmann::json::array();
+        getPowerSupplyReading(asyncResp, chassisId, powerSupplyPath,
+                              id, "RailVoltage", true);
         getPowerSupplyReading(asyncResp, chassisId, powerSupplyPath,
-                              id, "RailVoltage");
+                              id, "OutputPowerWatts", false);
     }
     else if (sensorName.find("Temperature") != std::string::npos)
     {
         getPowerSupplyReading(asyncResp, chassisId, powerSupplyPath,
-                              id, "TemperatureCelsius");
+                              id, "TemperatureCelsius", false);
     }
     else if (sensorName.find("Fan_Speed") != std::string::npos)
     {
+        asyncResp->res.jsonValue["FanSpeedPercent"] = nlohmann::json::array();
         getPowerSupplyReading(asyncResp, chassisId, powerSupplyPath,
-                              id, "FanSpeedPercent");
+                              id, "FanSpeedPercent", true);
     }
     else
     {
@@ -178,14 +195,6 @@ inline void
             chassisId, powerSupplyId);
     }
 
-    asyncResp->res.jsonValue["InputCurrentAmps"] = nlohmann::json::array();
-    asyncResp->res.jsonValue["InputPowerWatts"] = nlohmann::json::array();
-    asyncResp->res.jsonValue["InputVoltage"] = nlohmann::json::array();
-    asyncResp->res.jsonValue["RailCurrentAmps"] = nlohmann::json::array();
-    asyncResp->res.jsonValue["RailPowerWatts"] = nlohmann::json::array();
-    asyncResp->res.jsonValue["RailVoltage"] = nlohmann::json::array();
-    asyncResp->res.jsonValue["TemperatureCelsius"] = nlohmann::json::array();
-    asyncResp->res.jsonValue["FanSpeedPercent"] = nlohmann::json::array();
     asyncResp->res.jsonValue["Status"]["State"] = "Enabled";
     asyncResp->res.jsonValue["Status"]["Health"] = "OK";
 
-- 
2.34.1

