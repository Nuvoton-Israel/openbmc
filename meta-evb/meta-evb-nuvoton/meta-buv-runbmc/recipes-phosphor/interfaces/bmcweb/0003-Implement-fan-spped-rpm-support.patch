From 0b9d9f4c489313d129952fd357568159fc4a0c09 Mon Sep 17 00:00:00 2001
From: Allen Kang <jhkang@nuvoton.com>
Date: Thu, 29 Jun 2023 16:22:27 +0800
Subject: [PATCH 3/3] Implement fan spped rpm support.

Signed-off-by: Allen Kang <jhkang@nuvoton.com>
---
 redfish-core/lib/power_supply_metrics.hpp | 15 +++++++++++++--
 1 file changed, 13 insertions(+), 2 deletions(-)

diff --git a/redfish-core/lib/power_supply_metrics.hpp b/redfish-core/lib/power_supply_metrics.hpp
index 01512fbf19..ae2813bfb1 100644
--- a/redfish-core/lib/power_supply_metrics.hpp
+++ b/redfish-core/lib/power_supply_metrics.hpp
@@ -53,12 +53,17 @@ inline void
                 return;
             }
 
-            if (value)
+            if (value >= 0)
             {
                 nlohmann::json::object_t item;
                 item["DataSourceUri"] = boost::urls::format(
                     "/redfish/v1/Chassis/{}/Sensors/{}", chassisId, id);
-                item["Reading"] = std::to_string(value);
+
+                if ( location == "FanSpeedPercent" ) {
+                    item["SpeedRPM"] = std::to_string(value);
+                }
+                else
+                    item["Reading"] = std::to_string(value);
 
                 nlohmann::json& sensorList = asyncResp->res.jsonValue[location];
                 sensorList.emplace_back(std::move(item));
@@ -129,6 +134,11 @@ inline void
         getPowerSupplyReading(asyncResp, chassisId, powerSupplyPath,
                               id, "TemperatureCelsius");
     }
+    else if (sensorName.find("Fan_Speed") != std::string::npos)
+    {
+        getPowerSupplyReading(asyncResp, chassisId, powerSupplyPath,
+                              id, "FanSpeedPercent");
+    }
     else
     {
         return;
@@ -175,6 +185,7 @@ inline void
     asyncResp->res.jsonValue["RailPowerWatts"] = nlohmann::json::array();
     asyncResp->res.jsonValue["RailVoltage"] = nlohmann::json::array();
     asyncResp->res.jsonValue["TemperatureCelsius"] = nlohmann::json::array();
+    asyncResp->res.jsonValue["FanSpeedPercent"] = nlohmann::json::array();
     asyncResp->res.jsonValue["Status"]["State"] = "Enabled";
     asyncResp->res.jsonValue["Status"]["Health"] = "OK";
 
-- 
2.34.1

