From a8efe19351920acdb6630d98adb039a015e4650a Mon Sep 17 00:00:00 2001
From: Eason Yang <yhyang2@nuvoton.com>
Date: Tue, 31 Jan 2023 15:49:43 +0800
Subject: [PATCH] intrusionsensor: Add polling event status by sysfs.

E.g. the json config as below.
 {
     "Class": "Sysfs",
     "FilePath": "/sys/class/rtc/rtc0/intrusion_timestamp",
     "Name": "Chassis Intrusion Sensor",
     "Type": "ChassisIntrusionSensor"
 }

Signed-off-by: Eason Yang <yhyang2@nuvoton.com>
---
 src/ChassisIntrusionSensor.cpp | 120 +++++++++++++++++++++++++++++++--
 src/ChassisIntrusionSensor.hpp |  14 +++-
 src/IntrusionSensorMain.cpp    |  49 ++++++++++++--
 3 files changed, 171 insertions(+), 12 deletions(-)

diff --git a/src/ChassisIntrusionSensor.cpp b/src/ChassisIntrusionSensor.cpp
index 5bff6db9..1733b83b 100644
--- a/src/ChassisIntrusionSensor.cpp
+++ b/src/ChassisIntrusionSensor.cpp
@@ -18,6 +18,7 @@
 
 #include <fcntl.h>
 #include <sys/ioctl.h>
+#include <sys/inotify.h>
 #include <unistd.h>
 
 #include <boost/asio/io_context.hpp>
@@ -26,6 +27,7 @@
 #include <cerrno>
 #include <chrono>
 #include <iostream>
+#include <fstream>
 #include <memory>
 #include <string>
 #include <thread>
@@ -258,6 +260,88 @@ void ChassisIntrusionSensor::initGpioDeviceFile()
     }
 }
 
+void ChassisIntrusionSensor::pollSensorStatusBySysfs()
+{
+    static std::array<char, 1024> readBuffer;
+    const size_t iEventSize = sizeof(inotify_event);
+
+    inotifyConn.async_read_some(boost::asio::buffer(readBuffer),
+                                 [&](const boost::system::error_code& ec,
+                                     const std::size_t& bytesTransferred) {
+        if (ec)
+        {
+            std::cerr << "Callback Error: " << ec.message() << "\n";
+            return;
+        }
+        std::size_t index = 0;
+        while ((index + iEventSize) <= bytesTransferred)
+        {
+            struct inotify_event event
+            {};
+            std::memcpy(&event, &readBuffer[index], iEventSize);
+            if (event.wd == mFileWatchDesc)
+            {
+                if (event.mask == IN_MODIFY)
+                {
+                    // check timestamp and set string defined in chassis redfish schema
+                    checkIntrusionTimestamp();
+                }
+            }
+            index += (iEventSize + event.len);
+        }
+        pollSensorStatusBySysfs();
+    });
+}
+
+void ChassisIntrusionSensor::initInotifyFile()
+{
+    mInotifyFd = inotify_init1(IN_NONBLOCK);
+    if (mInotifyFd == -1)
+    {
+        std::cerr << "inotify_init1 failed.\n";
+        return;
+    }
+
+    // Add watch on a file to handle modifications.
+    mFileWatchDesc = inotify_add_watch(mInotifyFd, mFilePath.c_str(), IN_MODIFY);
+    if (mFileWatchDesc == -1)
+    {
+        std::cerr << "inotify_add_watch failed for " << mFilePath << ".\n";
+        return;
+    }
+
+    inotifyConn.assign(mInotifyFd);
+}
+
+void ChassisIntrusionSensor::checkIntrusionTimestamp()
+{
+    // check timestamp and set string defined in chassis redfish schema
+    std::string defaultTimestamp = "2000-00-00T00:00:00 UTC";
+    std::ifstream sysFile(mFilePath.c_str());
+    std::string timestamp;
+    mValue = "Normal";
+
+    if (!sysFile.good())
+    {
+        std::cerr << "Failure reading " << mFilePath << "(" << strerror(errno) << ")\n";
+        return;
+    }
+
+    getline(sysFile, timestamp);
+    if (timestamp != defaultTimestamp)
+    {
+        std::string newValue = "HardwareIntrusion";
+        if (newValue != "unknown" && mValue != newValue)
+        {
+            std::cerr << "update value from " << mValue << " to " << newValue
+                      << "\n";
+            updateValue(newValue);
+            std::cerr << "Intrusion timestamp: " << timestamp << "\n";
+        }
+    }
+    sysFile.close();
+}
+
 int ChassisIntrusionSensor::setSensorValue(const std::string& req,
                                            std::string& propertyValue)
 {
@@ -274,7 +358,7 @@ int ChassisIntrusionSensor::setSensorValue(const std::string& req,
 }
 
 void ChassisIntrusionSensor::start(IntrusionSensorType type, int busId,
-                                   int slaveAddr, bool gpioInverted)
+                                   int slaveAddr, bool gpioInverted, std::string filePath)
 {
     if (debug)
     {
@@ -290,12 +374,17 @@ void ChassisIntrusionSensor::start(IntrusionSensorType type, int busId,
             std::cerr << "gpio pinName = " << mPinName
                       << ", gpioInverted = " << gpioInverted << "\n";
         }
+        else if (type == IntrusionSensorType::sysfs)
+        {
+            std::cerr << "sysfs path = " << filePath << "\n";
+        }
     }
 
     if ((type == IntrusionSensorType::pch && busId == mBusId &&
          slaveAddr == mSlaveAddr) ||
         (type == IntrusionSensorType::gpio && gpioInverted == mGpioInverted &&
-         mInitialized))
+         mInitialized) || (type == IntrusionSensorType::sysfs &&
+         mFilePath != "" && mFilePath == filePath.c_str()))
     {
         return;
     }
@@ -304,9 +393,11 @@ void ChassisIntrusionSensor::start(IntrusionSensorType type, int busId,
     mBusId = busId;
     mSlaveAddr = slaveAddr;
     mGpioInverted = gpioInverted;
+    mFilePath = filePath;
 
     if ((mType == IntrusionSensorType::pch && mBusId > 0 && mSlaveAddr > 0) ||
-        (mType == IntrusionSensorType::gpio))
+        (mType == IntrusionSensorType::gpio) ||
+        (mType == IntrusionSensorType::sysfs && mFilePath != ""))
     {
         // initialize first if not initialized before
         if (!mInitialized)
@@ -322,6 +413,11 @@ void ChassisIntrusionSensor::start(IntrusionSensorType type, int busId,
             {
                 initGpioDeviceFile();
             }
+            else if (mType == IntrusionSensorType::sysfs)
+            {
+                checkIntrusionTimestamp();
+                initInotifyFile();
+            }
 
             mInitialized = true;
         }
@@ -336,6 +432,11 @@ void ChassisIntrusionSensor::start(IntrusionSensorType type, int busId,
             std::cerr << "Start polling intrusion sensors\n";
             pollSensorStatusByGpio();
         }
+        else if (mType == IntrusionSensorType::sysfs)
+        {
+            std::cerr << "Start polling intrusion event.\n";
+            pollSensorStatusBySysfs();
+        }
     }
 
     // invalid para, release resource
@@ -355,6 +456,11 @@ void ChassisIntrusionSensor::start(IntrusionSensorType type, int busId,
                     mGpioLine.release();
                 }
             }
+            else if (mType == IntrusionSensorType::sysfs)
+            {
+                inotify_rm_watch(mInotifyFd, mFileWatchDesc);
+                inotifyConn.close();
+            }
             mInitialized = false;
         }
     }
@@ -364,7 +470,8 @@ ChassisIntrusionSensor::ChassisIntrusionSensor(
     boost::asio::io_context& io,
     std::shared_ptr<sdbusplus::asio::dbus_interface> iface) :
     mIface(std::move(iface)),
-    mValue("unknown"), mOldValue("unknown"), mPollTimer(io), mGpioFd(io)
+    mValue("unknown"), mOldValue("unknown"), mPollTimer(io), mGpioFd(io),
+    mFilePath(""), inotifyConn(io)
 {}
 
 ChassisIntrusionSensor::~ChassisIntrusionSensor()
@@ -381,4 +488,9 @@ ChassisIntrusionSensor::~ChassisIntrusionSensor()
             mGpioLine.release();
         }
     }
+    else if (mType == IntrusionSensorType::sysfs)
+    {
+        inotify_rm_watch(mInotifyFd, mFileWatchDesc);
+        inotifyConn.close();
+    }
 }
diff --git a/src/ChassisIntrusionSensor.hpp b/src/ChassisIntrusionSensor.hpp
index be71e3f6..62f4897d 100644
--- a/src/ChassisIntrusionSensor.hpp
+++ b/src/ChassisIntrusionSensor.hpp
@@ -11,7 +11,8 @@
 enum IntrusionSensorType
 {
     pch,
-    gpio
+    gpio,
+    sysfs
 };
 
 class ChassisIntrusionSensor
@@ -24,7 +25,7 @@ class ChassisIntrusionSensor
     ~ChassisIntrusionSensor();
 
     void start(IntrusionSensorType type, int busId, int slaveAddr,
-               bool gpioInverted);
+               bool gpioInverted, std::string filePath);
 
   private:
     std::shared_ptr<sdbusplus::asio::dbus_interface> mIface;
@@ -47,6 +48,12 @@ class ChassisIntrusionSensor
     gpiod::line mGpioLine;
     boost::asio::posix::stream_descriptor mGpioFd;
 
+    // valid if it is via sysfs
+    std::string mFilePath = "";
+    boost::asio::posix::stream_descriptor inotifyConn;
+    int mInotifyFd{-1};
+    int mFileWatchDesc{-1};
+
     // common members
     bool mOverridenState = false;
     bool mInternalSet = false;
@@ -59,5 +66,8 @@ class ChassisIntrusionSensor
     void readGpio();
     void pollSensorStatusByGpio();
     void initGpioDeviceFile();
+    void pollSensorStatusBySysfs();
+    void initInotifyFile();
+    void checkIntrusionTimestamp();
     int setSensorValue(const std::string& req, std::string& propertyValue);
 };
diff --git a/src/IntrusionSensorMain.cpp b/src/IntrusionSensorMain.cpp
index a76457d9..c0f3d7fa 100644
--- a/src/IntrusionSensorMain.cpp
+++ b/src/IntrusionSensorMain.cpp
@@ -52,7 +52,7 @@ namespace fs = std::filesystem;
 static bool getIntrusionSensorConfig(
     const std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
     IntrusionSensorType* pType, int* pBusId, int* pSlaveAddr,
-    bool* pGpioInverted)
+    bool* pGpioInverted, std::string* pFilePath)
 {
     // find matched configuration according to sensor type
     ManagedObjectType sensorConfigurations;
@@ -85,13 +85,18 @@ static bool getIntrusionSensorConfig(
 
         baseConfiguration = &(*sensorBase);
 
-        // judge class, "Gpio" or "I2C"
+        // judge class, "Gpio", "Sysfs" or "I2C"
         auto findClass = baseConfiguration->second.find("Class");
         if (findClass != baseConfiguration->second.end() &&
             std::get<std::string>(findClass->second) == "Gpio")
         {
             *pType = IntrusionSensorType::gpio;
         }
+        else if (findClass != baseConfiguration->second.end() &&
+            std::get<std::string>(findClass->second) == "Sysfs")
+        {
+            *pType = IntrusionSensorType::sysfs;
+        }
         else
         {
             *pType = IntrusionSensorType::pch;
@@ -130,6 +135,37 @@ static bool getIntrusionSensorConfig(
             return true;
         }
 
+        // case to find SYSFS info
+        if (*pType == IntrusionSensorType::sysfs)
+        {
+            auto findFilePath =
+                baseConfiguration->second.find("FilePath");
+
+            if (findFilePath == baseConfiguration->second.end())
+            {
+                std::cerr << "error finding file path in configuration \n";
+                continue;
+            }
+
+            try
+            {
+                *pFilePath = std::get<std::string>(findFilePath->second);
+            }
+            catch (const std::bad_variant_access& e)
+            {
+                std::cerr << "invalid value for file path in config. \n";
+                continue;
+            }
+
+            if (debug)
+            {
+                std::cout << "find chassis intrusion sensor file path "
+                          << *pFilePath << "\n";
+            }
+
+            return true;
+        }
+
         // case to find I2C info
         if (*pType == IntrusionSensorType::pch)
         {
@@ -414,6 +450,7 @@ int main()
     int busId = -1;
     int slaveAddr = -1;
     bool gpioInverted = false;
+    std::string filePath;
     IntrusionSensorType type = IntrusionSensorType::gpio;
 
     // setup connection to dbus
@@ -435,9 +472,9 @@ int main()
     ChassisIntrusionSensor chassisIntrusionSensor(io, ifaceChassis);
 
     if (getIntrusionSensorConfig(systemBus, &type, &busId, &slaveAddr,
-                                 &gpioInverted))
+                                 &gpioInverted, &filePath))
     {
-        chassisIntrusionSensor.start(type, busId, slaveAddr, gpioInverted);
+        chassisIntrusionSensor.start(type, busId, slaveAddr, gpioInverted, filePath);
     }
 
     // callback to handle configuration change
@@ -451,9 +488,9 @@ int main()
 
         std::cout << "rescan due to configuration change \n";
         if (getIntrusionSensorConfig(systemBus, &type, &busId, &slaveAddr,
-                                     &gpioInverted))
+                                     &gpioInverted, &filePath))
         {
-            chassisIntrusionSensor.start(type, busId, slaveAddr, gpioInverted);
+            chassisIntrusionSensor.start(type, busId, slaveAddr, gpioInverted, filePath);
         }
     };
 
-- 
2.34.1

