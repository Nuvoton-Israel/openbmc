From 242c4b216cf6e408d113c7cd0a3c73ff104f3529 Mon Sep 17 00:00:00 2001
From: YSChu <yschu@nuvoton.com>
Date: Wed, 14 Aug 2019 15:16:12 +0800
Subject: [PATCH 2/4] add "Scale" d-bus interface property

Signed-off-by: YSChu <yschu@nuvoton.com>
---
 include/CPUSensor.hpp   | 1 +
 src/ADCSensor.cpp       | 2 ++
 src/CPUSensor.cpp       | 1 +
 src/HwmonTempSensor.cpp | 2 ++
 src/PSUSensor.cpp       | 4 ++++
 5 files changed, 10 insertions(+)

diff --git a/include/CPUSensor.hpp b/include/CPUSensor.hpp
index 29b8209..bbc99d1 100644
--- a/include/CPUSensor.hpp
+++ b/include/CPUSensor.hpp
@@ -30,6 +30,7 @@ class CPUSensor : public Sensor
     static constexpr unsigned int sensorScaleFactor = 1000;
     static constexpr unsigned int sensorPollMs = 1000;
     static constexpr size_t warnAfterErrorCount = 10;
+    static constexpr int64_t Scale = 0;
     static constexpr const char* labelTcontrol = "Tcontrol";
 
   private:
diff --git a/src/ADCSensor.cpp b/src/ADCSensor.cpp
index 25fd192..46ae434 100644
--- a/src/ADCSensor.cpp
+++ b/src/ADCSensor.cpp
@@ -43,6 +43,7 @@ static constexpr unsigned int sensorScaleFactor = 1000;
 static constexpr double roundFactor = 10000;     // 3 decimal places
 static constexpr double maxVoltageReading = 1.8; // pre sensor scaling
 static constexpr double minVoltageReading = 0;
+static constexpr int64_t Scale = 0;
 
 ADCSensor::ADCSensor(const std::string& path,
                      sdbusplus::asio::object_server& objectServer,
@@ -67,6 +68,7 @@ ADCSensor::ADCSensor(const std::string& path,
         "xyz.openbmc_project.Sensor.Value");
     sensorInterface->register_property("Unit",
         std::string("xyz.openbmc_project.Sensor.Value.Unit.Volts"));
+    sensorInterface->register_property("Scale", Scale);
     if (thresholds::hasWarningInterface(thresholds))
     {
         thresholdInterfaceWarning = objectServer.add_interface(
diff --git a/src/CPUSensor.cpp b/src/CPUSensor.cpp
index 1d04500..e0c62c6 100644
--- a/src/CPUSensor.cpp
+++ b/src/CPUSensor.cpp
@@ -74,6 +74,7 @@ CPUSensor::CPUSensor(const std::string& path, const std::string& objectType,
                 interfacePath, "xyz.openbmc_project.Sensor.Value");
             sensorInterface->register_property("Unit",
                 std::string("xyz.openbmc_project.Sensor.Value.Unit.DegreesC"));
+            sensorInterface->register_property("Scale", Scale);
             if (thresholds::hasWarningInterface(thresholds))
             {
                 thresholdInterfaceWarning = objectServer.add_interface(
diff --git a/src/HwmonTempSensor.cpp b/src/HwmonTempSensor.cpp
index dbac325..767394c 100644
--- a/src/HwmonTempSensor.cpp
+++ b/src/HwmonTempSensor.cpp
@@ -36,6 +36,7 @@ static constexpr size_t warnAfterErrorCount = 10;
 
 static constexpr double maxReading = 127;
 static constexpr double minReading = -128;
+static constexpr int64_t Scale = 0;
 
 HwmonTempSensor::HwmonTempSensor(
     const std::string& path, const std::string& objectType,
@@ -57,6 +58,7 @@ HwmonTempSensor::HwmonTempSensor(
 
     sensorInterface->register_property("Unit",
         std::string("xyz.openbmc_project.Sensor.Value.Unit.DegreesC"));
+    sensorInterface->register_property("Scale", Scale);
     if (thresholds::hasWarningInterface(thresholds))
     {
         thresholdInterfaceWarning = objectServer.add_interface(
diff --git a/src/PSUSensor.cpp b/src/PSUSensor.cpp
index d1ca876..ae9f5b8 100644
--- a/src/PSUSensor.cpp
+++ b/src/PSUSensor.cpp
@@ -77,21 +77,25 @@ PSUSensor::PSUSensor(const std::string& path, const std::string& objectType,
     {
         sensorInterface->register_property("Unit",
             std::string("xyz.openbmc_project.Sensor.Value.Unit.DegreesC"));
+        sensorInterface->register_property("Scale", 0);
     }
     else if (sensorTypeName == "voltage/")
     {
         sensorInterface->register_property("Unit",
             std::string("xyz.openbmc_project.Sensor.Value.Unit.Volts"));
+        sensorInterface->register_property("Scale", 0);
     }
     else if (sensorTypeName == "current/")
     {
         sensorInterface->register_property("Unit",
             std::string("xyz.openbmc_project.Sensor.Value.Unit.Amperes"));
+        sensorInterface->register_property("Scale", 0);
     }
     else if (sensorTypeName == "power/")
     {
         sensorInterface->register_property("Unit",
             std::string("xyz.openbmc_project.Sensor.Value.Unit.Watts"));
+        sensorInterface->register_property("Scale", 0);
     }
     if (thresholds::hasWarningInterface(thresholds))
     {
-- 
2.17.1

