From 477a5180e1f488da59e58ac6dfe16b16aa181c65 Mon Sep 17 00:00:00 2001
From: Brian Ma <chma0@nuvoton.com>
Date: Fri, 13 May 2022 10:30:14 +0800
Subject: [PATCH 1/3] Add set BIOS version support

---
 apphandler.cpp | 51 ++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 51 insertions(+)

diff --git a/apphandler.cpp b/apphandler.cpp
index 6cdd78f2..f3701d8d 100644
--- a/apphandler.cpp
+++ b/apphandler.cpp
@@ -50,6 +50,8 @@ static constexpr auto versionIntf = "xyz.openbmc_project.Software.Version";
 static constexpr auto activationIntf =
     "xyz.openbmc_project.Software.Activation";
 static constexpr auto softwareRoot = "/xyz/openbmc_project/software";
+static constexpr auto biosObjPath = "/xyz/openbmc_project/software/bios_active";
+static constexpr auto biosFile = "/var/lib/phosphor-bmc-code-mgmt/bios-release";
 
 void register_netfn_app_functions() __attribute__((constructor));
 
@@ -1366,6 +1368,52 @@ ipmi::RspType<uint8_t,                // Parameter revision
     return ipmi::responseSuccess(paramRevision, setSelector, configData);
 }
 
+void handleFirmwareVersion(uint8_t paramSelector, std::vector<uint8_t> data){
+    // just handle FW version
+    if (paramSelector != IPMI_SYSINFO_SYSTEM_FW_VERSION)
+    {
+        return;
+    }
+    sdbusplus::bus::bus bus{ipmid_get_sd_bus_connection()};
+
+    // read host version
+    uint8_t str_len = data[1];
+    auto iter = data.begin();
+    std::string fwVer(iter + 2, iter + str_len + 2);
+    log<level::INFO>(("ipmid get BIOS version:" + fwVer).c_str(),
+            entry("VERSION=%s", fwVer.c_str()));
+
+    // update host version to software manager
+    std::string service;
+    try
+    {
+        service = ipmi::getService(bus, versionIntf, biosObjPath);
+        ipmi::setDbusProperty(bus, service, biosObjPath, versionIntf,
+                              "Version", fwVer);
+    }
+    catch (const std::runtime_error& e)
+    {
+        log<level::ERR>("Cannot get service for update version",
+                         entry("ERROR=%s", e.what()),
+                         entry("INTERFACE=%s", versionIntf));
+    }
+    catch (sdbusplus::exception::SdBusError& e)
+    {
+        log<level::ERR>("sdbusplus exception - Unable to update BIOS version",
+                        entry("ERROR=%s", e.what()),
+                        entry("INTERFACE=%s", versionIntf),
+                        entry("SERVICE=%s", service.c_str()));
+    }
+    // write version file to storage
+    log<level::DEBUG>("write BIOS version file.");
+    std::ofstream myfile(biosFile, std::ofstream::out);
+    std::string version =
+         std::string("VERSION_ID=\"") + std::string(fwVer) + "\"";
+    myfile << version << std::endl;
+    myfile.close();
+}
+
+
 ipmi::RspType<> ipmiAppSetSystemInfo(uint8_t paramSelector, uint8_t data1,
                                      std::vector<uint8_t> configData)
 {
@@ -1429,6 +1477,9 @@ ipmi::RspType<> ipmiAppSetSystemInfo(uint8_t paramSelector, uint8_t data1,
         paramString = "";
     }
 
+    // read bios version from Intel ipmi command
+    handleFirmwareVersion(paramSelector, configData);
+
     uint8_t setSelector = data1;
     size_t count = 0;
     if (setSelector == 0) // First chunk has only 14 bytes.
-- 
2.17.1

