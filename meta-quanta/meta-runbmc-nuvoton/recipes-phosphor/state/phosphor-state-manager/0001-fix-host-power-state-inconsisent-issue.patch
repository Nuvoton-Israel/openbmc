From b114bba507b89fc7551a9f82d8c3cab673f43e2c Mon Sep 17 00:00:00 2001
From: CH Li <chli30@nuvoton.com>
Date: Thu, 8 Aug 2019 17:49:13 +0800
Subject: [PATCH] fix host power state inconsisent issue

---
 host_state_manager.cpp | 46 ++++++++++++++++++++++++++----------------
 1 file changed, 29 insertions(+), 17 deletions(-)

diff --git a/host_state_manager.cpp b/host_state_manager.cpp
index 7d661dd..2cea906 100644
--- a/host_state_manager.cpp
+++ b/host_state_manager.cpp
@@ -84,29 +84,41 @@ void Host::subscribeToSystemdSignals()
 
 void Host::determineInitialState()
 {
+    sdbusplus::message::variant<int> pgood = -1;
+    auto method = this->bus.new_method_call(
+        "org.openbmc.control.Power", "/org/openbmc/control/power0",
+        "org.freedesktop.DBus.Properties", "Get");
 
-    if (stateActive(HOST_STATE_POWERON_MIN_TGT))
+    method.append("org.openbmc.control.Power", "pgood");
+    try
     {
-        log<level::INFO>("Initial Host State will be Running",
-                         entry("CURRENT_HOST_STATE=%s",
-                               convertForMessage(HostState::Running).c_str()));
-        server::Host::currentHostState(HostState::Running);
-        server::Host::requestedHostTransition(Transition::On);
+        auto reply = this->bus.call(method);
+        reply.read(pgood);
+
+        if (sdbusplus::message::variant_ns::get<int>(pgood) == 1)
+        {
+            log<level::INFO>("Initial Host State will be Running",
+                             entry("CURRENT_HOST_STATE=%s",
+                                   convertForMessage(HostState::Running).c_str()));
+            server::Host::currentHostState(HostState::Running);
+            server::Host::requestedHostTransition(Transition::On);
+            return;
+        }
     }
-    else
+    catch (const SdBusError& e)
     {
-        log<level::INFO>("Initial Host State will be Off",
-                         entry("CURRENT_HOST_STATE=%s",
-                               convertForMessage(HostState::Off).c_str()));
-        server::Host::currentHostState(HostState::Off);
-        server::Host::requestedHostTransition(Transition::Off);
+       // Only log for unexpected error types.
+       log<level::ERR>("Error performing call to get pgood",
+                       entry("ERROR=%s", e.what()));
+       goto fail;
     }
 
-    if (!deserialize(HOST_STATE_PERSIST_PATH))
-    {
-        // set to default value.
-        server::Host::requestedHostTransition(Transition::Off);
-    }
+fail:
+    log<level::INFO>("Initial Host State will be Off",
+                     entry("CURRENT_HOST_STATE=%s",
+                           convertForMessage(HostState::Off).c_str()));
+    server::Host::currentHostState(HostState::Off);
+    server::Host::requestedHostTransition(Transition::Off);
 
     return;
 }
-- 
2.17.1

