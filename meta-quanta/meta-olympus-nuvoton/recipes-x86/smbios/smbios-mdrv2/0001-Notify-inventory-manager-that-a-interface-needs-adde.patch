From 77df2e87653c1cd1f81c9eb17fff16d31361f814 Mon Sep 17 00:00:00 2001
From: Tim Lee <timlee660101@gmail.com>
Date: Thu, 21 Jan 2021 14:42:20 +0800
Subject: [PATCH] Notify inventory manager that a interface needs added

Signed-off-by: Tim Lee <timlee660101@gmail.com>
---
 include/cpu.hpp  | 40 +++++++++++++++++++++++++++++++++
 include/dimm.hpp | 58 ++++++++++++++++++++++++++++++++++++++++++++++++
 src/cpu.cpp      | 18 +++++++++++++++
 src/dimm.cpp     | 26 ++++++++++++++++++++++
 4 files changed, 142 insertions(+)

diff --git a/include/cpu.hpp b/include/cpu.hpp
index 5c8ca86..e53d9d4 100644
--- a/include/cpu.hpp
+++ b/include/cpu.hpp
@@ -21,12 +21,33 @@
 #include <xyz/openbmc_project/Inventory/Decorator/Revision/server.hpp>
 #include <xyz/openbmc_project/Inventory/Item/Cpu/server.hpp>
 
+#include <sdbusplus/asio/object_server.hpp>
+#include <sdbusplus/server.hpp>
+#include <sdbusplus/message.hpp>
+#include <string>
+#include <variant>
+
 namespace phosphor
 {
 
 namespace smbios
 {
 
+using Path = std::string;
+
+using Property = std::string;
+
+using Value = std::variant<bool, uint8_t, uint16_t, int16_t, uint32_t, int32_t,
+                           uint64_t, int64_t, double, std::string>;
+using PropertyMap = std::map<Property, Value>;
+
+using Interface = std::string;
+using InterfaceMap = std::map<Interface, PropertyMap>;
+
+using Object = sdbusplus::message::object_path;
+
+using ObjectMap = std::map<Object, InterfaceMap>;
+
 using rev =
     sdbusplus::xyz::openbmc_project::Inventory::Decorator::server::Revision;
 using asset =
@@ -104,7 +125,19 @@ class Cpu : sdbusplus::server::object_t<processor, asset, rev>
                                                            objPath.c_str()),
         cpuNum(cpuId), storage(smbiosTableStorage)
     {
+        auto pimMsg = bus.new_method_call("xyz.openbmc_project.Inventory.Manager", "/xyz/openbmc_project/inventory", "xyz.openbmc_project.Inventory.Manager", "Notify");
+
         infoUpdate();
+        interfaces.emplace("xyz.openbmc_project.Inventory.Item.Cpu",property);
+        interfaces.emplace("xyz.openbmc_project.Inventory.Decorator.Asset", assertprop);
+        interfaces.emplace("xyz.openbmc_project.Inventory.Item", itemprop);
+        interfaces.emplace("xyz.openbmc_project.State.Decorator.OperationalStatus", opprop);
+
+        std::string str = objPath.c_str();
+        str.erase (0,30);
+        objects.emplace(str, interfaces);
+        pimMsg.append(std::move(objects));
+        bus.call(pimMsg);
     }
 
     void infoUpdate(void);
@@ -155,6 +188,13 @@ class Cpu : sdbusplus::server::object_t<processor, asset, rev>
     void version(const uint8_t positionNum, const uint8_t structLen,
                  uint8_t* dataIn);
     void characteristics(const uint16_t value);
+
+    ObjectMap objects;
+    InterfaceMap interfaces;
+    PropertyMap property;
+    PropertyMap assertprop;
+    PropertyMap itemprop;
+    PropertyMap opprop;
 };
 
 } // namespace smbios
diff --git a/include/dimm.hpp b/include/dimm.hpp
index 7d69a29..107b67e 100644
--- a/include/dimm.hpp
+++ b/include/dimm.hpp
@@ -20,15 +20,43 @@
 #include <xyz/openbmc_project/Inventory/Decorator/Asset/server.hpp>
 #include <xyz/openbmc_project/Inventory/Item/Dimm/server.hpp>
 
+#include <sdbusplus/asio/object_server.hpp>
+#include <sdbusplus/server.hpp>
+#include <sdbusplus/message.hpp>
+#include <string>
+#include <variant>
+
+static constexpr const char* dimmInterfaceName =
+    "xyz.openbmc_project.Inventory.Item.Dimm";
+
+sdbusplus::asio::object_server& getObjectServer(void);
+
 namespace phosphor
 {
 
 namespace smbios
 {
 
+using Path = std::string;
+
+using Property = std::string;
+
+using Value = std::variant<bool, uint8_t, uint16_t, int16_t, uint32_t, int32_t,
+                           uint64_t, int64_t, double, std::string>;
+using PropertyMap = std::map<Property, Value>;
+
+using Interface = std::string;
+using InterfaceMap = std::map<Interface, PropertyMap>;
+
+using Object = sdbusplus::message::object_path;
+
+using ObjectMap = std::map<Object, InterfaceMap>;
+
 using DeviceType =
     sdbusplus::xyz::openbmc_project::Inventory::Item::server::Dimm::DeviceType;
 
+using ConvertDim = sdbusplus::xyz::openbmc_project::Inventory::Item::server::Dimm;
+
 class Dimm :
     sdbusplus::server::object::object<
         sdbusplus::xyz::openbmc_project::Inventory::Item::server::Dimm>,
@@ -55,6 +83,27 @@ class Dimm :
         dimmNum(dimmId), storage(smbiosTableStorage)
     {
         memoryInfoUpdate();
+
+        auto pimMsg = bus.new_method_call("xyz.openbmc_project.Inventory.Manager", "/xyz/openbmc_project/inventory",
+                                  "xyz.openbmc_project.Inventory.Manager", "Notify");
+
+        interfaces.emplace("xyz.openbmc_project.Inventory.Item.Dimm", property);
+        interfaces.emplace("xyz.openbmc_project.Inventory.Decorator.Asset", assertprop);
+        interfaces.emplace("xyz.openbmc_project.Inventory.Item", itemprop);
+        interfaces.emplace("xyz.openbmc_project.State.Decorator.OperationalStatus", opprop);
+
+        std::string str = objPath.c_str();
+        str.erase (0,30);
+        objects.emplace(str, interfaces);
+        pimMsg.append(std::move(objects));
+        bus.call(pimMsg);
+
+        pimMsg = bus.new_method_call("xyz.openbmc_project.Inventory.Manager", objPath.c_str(),
+                                  "org.freedesktop.DBus.Properties", "Set");
+        pimMsg.append(std::move("xyz.openbmc_project.Inventory.Item.Dimm"));
+        pimMsg.append(std::move("MemoryType"));
+        pimMsg.append(std::move(typeprop));
+        bus.call(pimMsg);
     }
 
     void memoryInfoUpdate(void);
@@ -88,6 +137,15 @@ class Dimm :
                        uint8_t* dataIn);
     void dimmPartNum(const uint8_t positionNum, const uint8_t structLen,
                      uint8_t* dataIn);
+
+    std::shared_ptr<sdbusplus::asio::dbus_interface> dimmInterface;
+    ObjectMap objects;
+    InterfaceMap interfaces;
+    PropertyMap property;
+    PropertyMap assertprop;
+    PropertyMap itemprop;
+    PropertyMap opprop;
+    Value typeprop;
 };
 
 struct MemoryInfo
diff --git a/src/cpu.cpp b/src/cpu.cpp
index 90c1191..4baa525 100644
--- a/src/cpu.cpp
+++ b/src/cpu.cpp
@@ -30,6 +30,8 @@ void Cpu::socket(const uint8_t positionNum, const uint8_t structLen,
     std::string result = positionToString(positionNum, structLen, dataIn);
 
     processor::socket(result);
+
+    property.emplace(std::move("ProcessorSocket"),std::move(result));
 }
 
 void Cpu::family(const uint8_t value)
@@ -38,10 +40,12 @@ void Cpu::family(const uint8_t value)
     if (it == familyTable.end())
     {
         processor::family("Unknown Processor Family");
+        property.emplace(std::move("ProcessorFamily"), std::move("Unknown Processor Family"));
     }
     else
     {
         processor::family(it->second);
+        property.emplace(std::move("ProcessorFamily"), std::move(it->second));
     }
 }
 
@@ -51,6 +55,9 @@ void Cpu::manufacturer(const uint8_t positionNum, const uint8_t structLen,
     std::string result = positionToString(positionNum, structLen, dataIn);
 
     asset::manufacturer(result);
+
+    property.emplace(std::move("ProcessorManufacturer"), std::move(result));
+    assertprop.emplace(std::move("Manufacturer"), std::move("Intel"));
 }
 
 void Cpu::version(const uint8_t positionNum, const uint8_t structLen,
@@ -61,6 +68,8 @@ void Cpu::version(const uint8_t positionNum, const uint8_t structLen,
     result = positionToString(positionNum, structLen, dataIn);
 
     rev::version(result);
+
+    property.emplace(std::move("ProcessorVersion"), std::move(result));
 }
 
 void Cpu::characteristics(uint16_t value)
@@ -117,27 +126,36 @@ void Cpu::infoUpdate(void)
     manufacturer(cpuInfo->manufacturer, cpuInfo->length,
                  dataIn);                               // offset 7h
     id(cpuInfo->id);                                    // offset 8h
+    property.emplace(std::move("ProcessorId"), static_cast<uint32_t>((uint32_t)cpuInfo->id)); // offset 8h
     version(cpuInfo->version, cpuInfo->length, dataIn); // offset 10h
     maxSpeedInMhz(cpuInfo->maxSpeed);                   // offset 14h
+    property.emplace(std::move("ProcessorMaxSpeed"), static_cast<uint16_t>((uint16_t)cpuInfo->maxSpeed)); // offset 14h
     if (cpuInfo->coreCount < maxOldVersionCount)        // offset 23h or 2Ah
     {
         coreCount(cpuInfo->coreCount);
+        property.emplace(std::move("ProcessorCoreCount"), static_cast<uint16_t>((uint16_t)cpuInfo->coreCount));
     }
     else
     {
         coreCount(cpuInfo->coreCount2);
+        property.emplace(std::move("ProcessorCoreCount"), static_cast<uint16_t>((uint16_t)cpuInfo->coreCount2));
     }
 
     if (cpuInfo->threadCount < maxOldVersionCount) // offset 25h or 2Eh)
     {
         threadCount(cpuInfo->threadCount);
+        property.emplace(std::move("ProcessorThreadCount"), static_cast<uint16_t>((uint16_t)cpuInfo->threadCount));
     }
     else
     {
         threadCount(cpuInfo->threadCount2);
+        property.emplace(std::move("ProcessorThreadCount"), static_cast<uint16_t>((uint16_t)cpuInfo->threadCount2));
     }
 
     characteristics(cpuInfo->characteristics); // offset 26h
+
+    itemprop.emplace(std::move("Present"), static_cast<bool>(true));
+    opprop.emplace(std::move("Functional"), static_cast<bool>(true));
 }
 
 } // namespace smbios
diff --git a/src/dimm.cpp b/src/dimm.cpp
index 71123d2..cc2c84f 100644
--- a/src/dimm.cpp
+++ b/src/dimm.cpp
@@ -54,6 +54,7 @@ void Dimm::memoryInfoUpdate(void)
     auto memoryInfo = reinterpret_cast<struct MemoryInfo*>(dataIn);
 
     memoryDataWidth(memoryInfo->dataWidth);
+    property.emplace(std::move("MemoryDataWidth"), static_cast<uint16_t>((uint16_t)memoryInfo->dataWidth));
 
     if (memoryInfo->size == maxOldDimmSize)
     {
@@ -68,12 +69,17 @@ void Dimm::memoryInfoUpdate(void)
     dimmType(memoryInfo->memoryType);
     dimmTypeDetail(memoryInfo->typeDetail);
     maxMemorySpeedInMhz(memoryInfo->speed);
+    property.emplace(std::move("MaxMemorySpeedInMhz"), static_cast<uint16_t>((uint16_t)memoryInfo->speed));
     dimmManufacturer(memoryInfo->manufacturer, memoryInfo->length, dataIn);
     dimmSerialNum(memoryInfo->serialNum, memoryInfo->length, dataIn);
     dimmPartNum(memoryInfo->partNum, memoryInfo->length, dataIn);
     memoryAttributes(memoryInfo->attributes);
     memoryConfiguredSpeedInMhz(memoryInfo->confClockSpeed);
 
+    property.emplace(std::move("MemoryAttributes"), static_cast<uint8_t>((uint8_t)memoryInfo->attributes));
+    property.emplace(std::move("MemoryConfiguredSpeedInMhz"), static_cast<uint16_t>((uint16_t)memoryInfo->confClockSpeed));
+    itemprop.emplace(std::move("Present"), static_cast<bool>(true));
+    opprop.emplace(std::move("Functional"), static_cast<bool>(true));
     return;
 }
 
@@ -93,12 +99,16 @@ void Dimm::dimmSize(const uint16_t size)
         result = result * dimmSizeUnit;
     }
     memorySizeInKB(result);
+
+    property.emplace(std::move("MemorySizeInKB"), static_cast<uint32_t>(result));
 }
 
 void Dimm::dimmSizeExt(uint32_t size)
 {
     size = size * dimmSizeUnit;
     memorySizeInKB(size);
+
+    property.emplace(std::move("MemorySizeInKB"), static_cast<uint32_t>(size));
 }
 
 uint32_t Dimm::memorySizeInKB(uint32_t value)
@@ -113,6 +123,8 @@ void Dimm::dimmDeviceLocator(const uint8_t positionNum, const uint8_t structLen,
     std::string result = positionToString(positionNum, structLen, dataIn);
 
     memoryDeviceLocator(result);
+
+    property.emplace(std::move("MemoryDeviceLocator"), std::move(result));
 }
 
 std::string Dimm::memoryDeviceLocator(std::string value)
@@ -124,14 +136,20 @@ std::string Dimm::memoryDeviceLocator(std::string value)
 void Dimm::dimmType(const uint8_t type)
 {
     std::map<uint8_t, DeviceType>::const_iterator it = dimmTypeTable.find(type);
+    std::string value;
+
     if (it == dimmTypeTable.end())
     {
         memoryType(DeviceType::Unknown);
+        value = ConvertDim::convertDeviceTypeToString(DeviceType::Unknown);
     }
     else
     {
         memoryType(it->second);
+        value = ConvertDim::convertDeviceTypeToString(it->second);
     }
+
+    typeprop = std::move(value);
 }
 
 DeviceType Dimm::memoryType(DeviceType value)
@@ -152,6 +170,8 @@ void Dimm::dimmTypeDetail(uint16_t detail)
         detail >>= 1;
     }
     memoryTypeDetail(result);
+
+    property.emplace(std::move("MemoryTypeDetail"), std::move(result));
 }
 
 std::string Dimm::memoryTypeDetail(std::string value)
@@ -172,6 +192,8 @@ void Dimm::dimmManufacturer(const uint8_t positionNum, const uint8_t structLen,
     std::string result = positionToString(positionNum, structLen, dataIn);
 
     manufacturer(result);
+
+    assertprop.emplace(std::move("Manufacturer"), std::move(result));
 }
 
 std::string Dimm::manufacturer(std::string value)
@@ -186,6 +208,8 @@ void Dimm::dimmSerialNum(const uint8_t positionNum, const uint8_t structLen,
     std::string result = positionToString(positionNum, structLen, dataIn);
 
     serialNumber(result);
+
+    assertprop.emplace(std::move("SerialNumber"), std::move(result));
 }
 
 std::string Dimm::serialNumber(std::string value)
@@ -200,6 +224,8 @@ void Dimm::dimmPartNum(const uint8_t positionNum, const uint8_t structLen,
     std::string result = positionToString(positionNum, structLen, dataIn);
 
     partNumber(result);
+
+    assertprop.emplace(std::move("PartNumber"), std::move(result));
 }
 
 std::string Dimm::partNumber(std::string value)
-- 
2.17.1

