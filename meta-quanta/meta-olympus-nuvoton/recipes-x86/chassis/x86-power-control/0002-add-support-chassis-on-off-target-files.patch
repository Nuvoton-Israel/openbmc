From 3dc30fb1ad2ca81a6dccf2018c1a6c17f2ff0b20 Mon Sep 17 00:00:00 2001
From: Eason Yang <yhyang2@nuvoton.com>
Date: Fri, 6 Sep 2024 13:26:46 +0800
Subject: [PATCH] add support chassis on/off target files

Signed-off-by: Tim Lee <timlee660101@gmail.com>
Signed-off-by: Joseph Liu <kwliu@nuvoton.com>
Signed-off-by: Eason Yang <yhyang2@nuvoton.com>
---
 src/power_control.cpp | 46 ++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 43 insertions(+), 3 deletions(-)

diff --git a/src/power_control.cpp b/src/power_control.cpp
index d90e6c4..31bcffb 100644
--- a/src/power_control.cpp
+++ b/src/power_control.cpp
@@ -33,7 +33,6 @@
 #include <optional>
 #include <regex>
 #include <string_view>
-#include <iostream>
 
 namespace power_control
 {
@@ -553,8 +552,44 @@ static void setBootProgress(const BootProgressStage stage)
 {
     bootIface->set_property("BootProgress",
                             std::string(getBootProgressStage(stage)));
-    std::cerr << "Moving boot progress to \""
-            << std::string(getBootProgressStage(stage)) << "\" stage.\n";
+    lg2::info("Moving boot progress to {BOOT_STAGE} stage.",
+             "BOOT_STAGE", std::string(getBootProgressStage(stage)));
+}
+
+static constexpr auto systemdBusname = "org.freedesktop.systemd1";
+static constexpr auto systemdPath = "/org/freedesktop/systemd1";
+static constexpr auto systemdInterface = "org.freedesktop.systemd1.Manager";
+static constexpr auto chassisOnTargetName = "obmc-chassis-poweron.target";
+static constexpr auto chassisOffTargetName = "obmc-chassis-poweroff.target";
+
+void chassisPowerOn()
+{
+    conn->async_method_call(
+        [](boost::system::error_code ec) {
+            if (ec)
+            {
+                lg2::error("Failed to call chassisPowerOn (ec = {ERROR_MSG})",
+                    "ERROR_MSG", ec.message());
+            }
+        },
+        systemdBusname, systemdPath, systemdInterface, "StartUnit",
+        chassisOnTargetName, "replace");
+    return;
+}
+
+void chassisPowerOff()
+{
+    conn->async_method_call(
+        [](boost::system::error_code ec) {
+            if (ec)
+            {
+                lg2::error("Failed to call chassisPowerOff (ec = {ERROR_MSG})",
+                    "ERROR_MSG", ec.message());
+            }
+        },
+        systemdBusname, systemdPath, systemdInterface, "StartUnit",
+        chassisOffTargetName, "replace");
+    return;
 }
 
 static constexpr std::string_view getHostState(const PowerState state)
@@ -1631,6 +1666,8 @@ static void currentHostStateMonitor()
         pohCounterTimerStart();
         // Clear the restart cause set for the next restart
         clearRestartCause();
+
+        power_control::chassisPowerOn();
     }
     else
     {
@@ -1640,6 +1677,7 @@ static void currentHostStateMonitor()
         osIface->set_property("OperatingSystemState", std::string("Inactive"));
         setBootProgress(BootProgressStage::Unspecified);
 
+        power_control::chassisPowerOff();
         // Set the restart cause set for this restart
         setRestartCause();
     }
@@ -2359,12 +2397,14 @@ static void postCompleteHandler(bool state)
         sendPowerControlEvent(Event::postCompleteAssert);
         setOperatingSystemState(OperatingSystemStateStage::Standby);
         setBootProgress(BootProgressStage::OSStart);
+        power_control::chassisPowerOn();
     }
     else
     {
         sendPowerControlEvent(Event::postCompleteDeAssert);
         setOperatingSystemState(OperatingSystemStateStage::Inactive);
         setBootProgress(BootProgressStage::Unspecified);
+        power_control::chassisPowerOff();
     }
 }
 
-- 
2.34.1

