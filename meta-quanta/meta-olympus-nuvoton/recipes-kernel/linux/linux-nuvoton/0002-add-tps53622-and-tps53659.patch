From f718ec1e14968a189981b2d5ddc20a236f1a1d61 Mon Sep 17 00:00:00 2001
From: kwliu <kwliu@nuvoton.com>
Date: Mon, 8 Jul 2019 10:05:09 +0800
Subject: [PATCH] add tps53622 and tps53659

Signed-off-by: Joseph Liu <kwliu@nuvoton.com>
---
 drivers/hwmon/pmbus/Kconfig    |  17 +++++
 drivers/hwmon/pmbus/Makefile   |   2 +
 drivers/hwmon/pmbus/tps53622.c | 110 +++++++++++++++++++++++++++++++++
 drivers/hwmon/pmbus/tps53659.c | 110 +++++++++++++++++++++++++++++++++
 4 files changed, 239 insertions(+)
 create mode 100644 drivers/hwmon/pmbus/tps53622.c
 create mode 100644 drivers/hwmon/pmbus/tps53659.c

diff --git a/drivers/hwmon/pmbus/Kconfig b/drivers/hwmon/pmbus/Kconfig
index a25faf69fce3..2ace002bb45e 100644
--- a/drivers/hwmon/pmbus/Kconfig
+++ b/drivers/hwmon/pmbus/Kconfig
@@ -287,4 +287,21 @@ config SENSORS_ZL6100
 	  This driver can also be built as a module. If so, the module will
 	  be called zl6100.
 
+config SENSORS_TPS53659
+	tristate "TI TPS53659"
+	help
+	  If you say yes here you get hardware monitoring support for TI TPS53659.
+	  
+	  This driver can also be built as a module. If so, the module will
+	  be called tps53659.
+
+config SENSORS_TPS53622
+	tristate "TI TPS53622"
+	help
+	  If you say yes here you get hardware monitoring support for TI TPS53622.
+
+	  This driver can also be built as a module. If so, the module will
+	  be called tps53622.
+
+
 endif # PMBUS
diff --git a/drivers/hwmon/pmbus/Makefile b/drivers/hwmon/pmbus/Makefile
index 4c97ad0bd791..bea4347f8542 100644
--- a/drivers/hwmon/pmbus/Makefile
+++ b/drivers/hwmon/pmbus/Makefile
@@ -32,3 +32,5 @@ obj-$(CONFIG_SENSORS_UCD9000)	+= ucd9000.o
 obj-$(CONFIG_SENSORS_UCD9200)	+= ucd9200.o
 obj-$(CONFIG_SENSORS_XDPE122)	+= xdpe12284.o
 obj-$(CONFIG_SENSORS_ZL6100)	+= zl6100.o
+obj-$(CONFIG_SENSORS_TPS53622)  += tps53622.o
+obj-$(CONFIG_SENSORS_TPS53659)  += tps53659.o
diff --git a/drivers/hwmon/pmbus/tps53622.c b/drivers/hwmon/pmbus/tps53622.c
new file mode 100644
index 000000000000..77fb7318446e
--- /dev/null
+++ b/drivers/hwmon/pmbus/tps53622.c
@@ -0,0 +1,110 @@
+/*
+ * Hardware monitoring driver for Texas Instruments TPS53622
+ *
+ * Copyright (c) 2017 Mellanox Technologies. All rights reserved.
+ * Copyright (c) 2017 Vadim Pasternak <vadimp@mellanox.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/err.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include "pmbus.h"
+
+#define TPS53622_PROT_VR12_5MV		0x01 /* VR12.0 mode, 5-mV DAC */
+#define TPS53622_PROT_VR12_5_10MV	0x02 /* VR12.5 mode, 10-mV DAC */
+#define TPS53622_PROT_VR13_10MV		0x04 /* VR13.0 mode, 10-mV DAC */
+#define TPS53622_PROT_IMVP8_5MV		0x05 /* IMVP8 mode, 5-mV DAC */
+#define TPS53622_PROT_VR13_5MV		0x07 /* VR13.0 mode, 5-mV DAC */
+#define TPS53622_PAGE_NUM		2
+
+static int tps53622_identify(struct i2c_client *client,
+			     struct pmbus_driver_info *info)
+{
+	u8 vout_params;
+	int ret;
+
+	/* Read the register with VOUT scaling value.*/
+	ret = pmbus_read_byte_data(client, 0, PMBUS_VOUT_MODE);
+	if (ret < 0)
+		return ret;
+
+	vout_params = ret & GENMASK(4, 0);
+
+	switch (vout_params) {
+	case TPS53622_PROT_VR13_10MV:
+	case TPS53622_PROT_VR12_5_10MV:
+		info->vrm_version[0] = vr13;
+		break;
+	case TPS53622_PROT_VR13_5MV:
+	case TPS53622_PROT_VR12_5MV:
+	case TPS53622_PROT_IMVP8_5MV:
+		info->vrm_version[0] = vr12;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static struct pmbus_driver_info tps53622_info = {
+	.pages = TPS53622_PAGE_NUM,
+	.format[PSC_VOLTAGE_IN] = linear,
+	.format[PSC_VOLTAGE_OUT] = vid,
+	.format[PSC_TEMPERATURE] = linear,
+	.format[PSC_CURRENT_OUT] = linear,
+	.format[PSC_POWER] = linear,
+	.func[0] = PMBUS_HAVE_VIN | PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT |
+		   PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT | PMBUS_HAVE_TEMP |
+		   PMBUS_HAVE_STATUS_TEMP | PMBUS_HAVE_POUT | PMBUS_HAVE_PIN,
+	.func[1] = PMBUS_HAVE_VIN | PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT |
+		   PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT | PMBUS_HAVE_TEMP |
+		   PMBUS_HAVE_STATUS_TEMP | PMBUS_HAVE_POUT | PMBUS_HAVE_PIN,
+	.identify = tps53622_identify,
+};
+
+static int tps53622_probe(struct i2c_client *client)
+{
+	return pmbus_do_probe(client, &tps53622_info);
+}
+
+static const struct i2c_device_id tps53622_id[] = {
+	{"tps53622", 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, tps53622_id);
+
+static const struct of_device_id tps53622_of_match[] = {
+	{.compatible = "ti,tps53622"},
+	{}
+};
+MODULE_DEVICE_TABLE(of, tps53622_of_match);
+
+static struct i2c_driver tps53622_driver = {
+	.driver = {
+		.name = "tps53622",
+		.of_match_table = of_match_ptr(tps53622_of_match),
+	},
+	.probe_new = tps53622_probe,
+	.remove = pmbus_do_remove,
+	.id_table = tps53622_id,
+};
+
+module_i2c_driver(tps53622_driver);
+
+MODULE_AUTHOR("Vadim Pasternak <vadimp@mellanox.com>");
+MODULE_DESCRIPTION("PMBus driver for Texas Instruments TPS53622");
+MODULE_LICENSE("GPL");
diff --git a/drivers/hwmon/pmbus/tps53659.c b/drivers/hwmon/pmbus/tps53659.c
new file mode 100644
index 000000000000..3bd7230300e4
--- /dev/null
+++ b/drivers/hwmon/pmbus/tps53659.c
@@ -0,0 +1,110 @@
+/*
+ * Hardware monitoring driver for Texas Instruments TPS53659
+ *
+ * Copyright (c) 2017 Mellanox Technologies. All rights reserved.
+ * Copyright (c) 2017 Vadim Pasternak <vadimp@mellanox.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/err.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include "pmbus.h"
+
+#define TPS53659_PROT_VR12_5MV		0x01 /* VR12.0 mode, 5-mV DAC */
+#define TPS53659_PROT_VR12_5_10MV	0x02 /* VR12.5 mode, 10-mV DAC */
+#define TPS53659_PROT_VR13_10MV		0x04 /* VR13.0 mode, 10-mV DAC */
+#define TPS53659_PROT_IMVP8_5MV		0x05 /* IMVP8 mode, 5-mV DAC */
+#define TPS53659_PROT_VR13_5MV		0x07 /* VR13.0 mode, 5-mV DAC */
+#define TPS53659_PAGE_NUM		2
+
+static int tps53659_identify(struct i2c_client *client,
+			     struct pmbus_driver_info *info)
+{
+	u8 vout_params;
+	int ret;
+
+	/* Read the register with VOUT scaling value.*/
+	ret = pmbus_read_byte_data(client, 0, PMBUS_VOUT_MODE);
+	if (ret < 0)
+		return ret;
+
+	vout_params = ret & GENMASK(4, 0);
+
+	switch (vout_params) {
+	case TPS53659_PROT_VR13_10MV:
+	case TPS53659_PROT_VR12_5_10MV:
+		info->vrm_version[0] = vr13;
+		break;
+	case TPS53659_PROT_VR13_5MV:
+	case TPS53659_PROT_VR12_5MV:
+	case TPS53659_PROT_IMVP8_5MV:
+		info->vrm_version[0] = vr12;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static struct pmbus_driver_info tps53659_info = {
+	.pages = TPS53659_PAGE_NUM,
+	.format[PSC_VOLTAGE_IN] = linear,
+	.format[PSC_VOLTAGE_OUT] = vid,
+	.format[PSC_TEMPERATURE] = linear,
+	.format[PSC_CURRENT_OUT] = linear,
+	.format[PSC_POWER] = linear,
+	.func[0] = PMBUS_HAVE_VIN | PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT |
+		   PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT | PMBUS_HAVE_TEMP |
+		   PMBUS_HAVE_STATUS_TEMP | PMBUS_HAVE_POUT | PMBUS_HAVE_PIN,
+	.func[1] = PMBUS_HAVE_VIN | PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT |
+		   PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT | PMBUS_HAVE_TEMP |
+		   PMBUS_HAVE_STATUS_TEMP | PMBUS_HAVE_POUT | PMBUS_HAVE_PIN,
+	.identify = tps53659_identify,
+};
+
+static int tps53659_probe(struct i2c_client *client)
+{
+	return pmbus_do_probe(client, &tps53659_info);
+}
+
+static const struct i2c_device_id tps53659_id[] = {
+	{"tps53659", 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, tps53659_id);
+
+static const struct of_device_id tps53659_of_match[] = {
+	{.compatible = "ti,tps53659"},
+	{}
+};
+MODULE_DEVICE_TABLE(of, tps53659_of_match);
+
+static struct i2c_driver tps53659_driver = {
+	.driver = {
+		.name = "tps53659",
+		.of_match_table = of_match_ptr(tps53659_of_match),
+	},
+	.probe_new = tps53659_probe,
+	.remove = pmbus_do_remove,
+	.id_table = tps53659_id,
+};
+
+module_i2c_driver(tps53659_driver);
+
+MODULE_AUTHOR("Vadim Pasternak <vadimp@mellanox.com>");
+MODULE_DESCRIPTION("PMBus driver for Texas Instruments TPS53659");
+MODULE_LICENSE("GPL");
-- 
2.17.1

