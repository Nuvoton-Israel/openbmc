diff --git a/libpldm/platform.c b/libpldm/platform.c
index bc45ae0f..acfc4120 100644
--- a/libpldm/platform.c
+++ b/libpldm/platform.c
@@ -1346,6 +1346,92 @@ int decode_pldm_pdr_repository_change_record_data(
 	return PLDM_SUCCESS;
 }
 
+int encode_get_sensor_threshold_req(uint8_t instance_id,
+				 uint16_t sensor_id,
+				 struct pldm_msg *msg)
+{
+	struct pldm_header_info header = {0};
+	int rc = PLDM_SUCCESS;
+
+	header.msg_type = PLDM_REQUEST;
+	header.instance = instance_id;
+	header.pldm_type = PLDM_PLATFORM;
+	header.command = PLDM_GET_SENSOR_THRESHOLD;
+
+	if (msg == NULL) {
+		return PLDM_ERROR_INVALID_DATA;
+	}
+
+	if ((rc = pack_pldm_header(&header, &(msg->hdr))) > PLDM_SUCCESS) {
+		return rc;
+	}
+
+	struct pldm_get_sensor_threshold_req *request =
+	    (struct pldm_get_sensor_threshold_req *)msg->payload;
+
+	request->sensor_id = htole16(sensor_id);
+
+	return PLDM_SUCCESS;
+}
+
+int decode_get_sensor_threshold_resp(const struct pldm_msg *msg, size_t payload_length,
+			uint8_t *completion_code, uint8_t *sensor_data_size,
+			uint8_t *thresholds)
+{
+	if (msg == NULL || completion_code == NULL ||
+		sensor_data_size == NULL || thresholds == NULL) {
+		return PLDM_ERROR_INVALID_DATA;
+	}
+
+	*completion_code = msg->payload[0];
+	if (PLDM_SUCCESS != *completion_code) {
+		return PLDM_SUCCESS;
+	}
+
+	if (payload_length < PLDM_GET_NUMERIC_SENSOR_THRESHOLD_MIN_RSP_BYTES) {
+		return PLDM_ERROR_INVALID_LENGTH;
+	}
+
+	struct pldm_get_sensor_threshold_resp *response =
+	    (struct pldm_get_sensor_threshold_resp *)msg->payload;
+
+	*sensor_data_size = response->sensor_data_size;
+
+	if (*sensor_data_size > PLDM_EFFECTER_DATA_SIZE_SINT32) {
+		return PLDM_ERROR_INVALID_DATA;
+	}
+
+	if (*sensor_data_size == PLDM_EFFECTER_DATA_SIZE_UINT8 ||
+		*sensor_data_size == PLDM_EFFECTER_DATA_SIZE_SINT8) {
+
+		if (payload_length !=
+			PLDM_GET_NUMERIC_SENSOR_THRESHOLD_MIN_RSP_BYTES) {
+			return PLDM_ERROR_INVALID_LENGTH;
+		}
+		memcpy(thresholds, response->threshold, 6);
+	}
+
+	if (*sensor_data_size == PLDM_EFFECTER_DATA_SIZE_UINT16 ||
+		*sensor_data_size == PLDM_EFFECTER_DATA_SIZE_SINT16) {
+		if (payload_length !=
+			PLDM_GET_NUMERIC_SENSOR_THRESHOLD_MIN_RSP_BYTES + 6) {
+			return PLDM_ERROR_INVALID_LENGTH;
+		}
+		memcpy(thresholds, response->threshold, 2*6);
+	}
+
+	if (*sensor_data_size == PLDM_EFFECTER_DATA_SIZE_UINT32 ||
+		*sensor_data_size == PLDM_EFFECTER_DATA_SIZE_SINT32) {
+
+		if (payload_length !=
+			PLDM_GET_NUMERIC_SENSOR_THRESHOLD_MIN_RSP_BYTES + 18) {
+			return PLDM_ERROR_INVALID_LENGTH;
+		}
+		memcpy(thresholds, response->threshold, 4*6);
+	}
+	return PLDM_SUCCESS;
+}
+
 int encode_get_sensor_reading_req(uint8_t instance_id, uint16_t sensor_id,
 				  uint8_t rearm_event_state,
 				  struct pldm_msg *msg)
@@ -1404,6 +1490,7 @@ int decode_get_sensor_reading_resp(
 	if (response->sensor_data_size > PLDM_SENSOR_DATA_SIZE_SINT32) {
 		return PLDM_ERROR_INVALID_DATA;
 	}
+
 	if (response->sensor_data_size > *sensor_data_size) {
 		return PLDM_ERROR_INVALID_LENGTH;
 	}
diff --git a/libpldm/platform.h b/libpldm/platform.h
index ed175a97..ef3f0b4c 100644
--- a/libpldm/platform.h
+++ b/libpldm/platform.h
@@ -28,6 +28,7 @@ extern "C" {
 #define PLDM_GET_NUMERIC_EFFECTER_VALUE_MIN_RESP_BYTES 5
 #define PLDM_GET_SENSOR_READING_MIN_RESP_BYTES 8
 #define PLDM_GET_STATE_SENSOR_READINGS_MIN_RESP_BYTES 2
+#define PLDM_GET_NUMERIC_SENSOR_THRESHOLD_MIN_RSP_BYTES 8
 
 /* Minimum length for PLDM PlatformEventMessage request */
 #define PLDM_PLATFORM_EVENT_MESSAGE_MIN_REQ_BYTES 3
@@ -109,6 +110,7 @@ enum pldm_effecter_oper_state {
 
 enum pldm_platform_commands {
 	PLDM_GET_SENSOR_READING = 0x11,
+	PLDM_GET_SENSOR_THRESHOLD = 0x12,
 	PLDM_GET_STATE_SENSOR_READINGS = 0x21,
 	PLDM_SET_NUMERIC_EFFECTER_VALUE = 0x31,
 	PLDM_GET_NUMERIC_EFFECTER_VALUE = 0x32,
@@ -670,6 +672,24 @@ struct pldm_get_sensor_reading_resp {
 
 /* Responder */
 
+/** @struct pldm_get_sensor_reading_req
+ *
+ *  Structure representing PLDM get sensor reading request
+ */
+struct pldm_get_sensor_threshold_req {
+	uint16_t sensor_id;
+} __attribute__((packed));
+
+/** @struct pldm_get_sensor_threshold_resp
+ *
+ *  Structure representing PLDM get sensor threshold response
+ */
+struct pldm_get_sensor_threshold_resp {
+	uint8_t completion_code;
+	uint8_t sensor_data_size;
+	uint8_t threshold[1];
+} __attribute__((packed));
+
 /* SetNumericEffecterValue */
 
 /** @brief Decode SetNumericEffecterValue request data
@@ -1416,6 +1436,36 @@ int decode_get_sensor_reading_resp(
     uint8_t *sensor_event_message_enable, uint8_t *present_state,
     uint8_t *previous_state, uint8_t *event_state, uint8_t *present_reading);
 
+/* GetSensorThreshold */
+
+/** @brief Encode GetSensorThreshold request data
+ *
+ *  @param[in] instance_id - Message's instance id
+ *  @param[in] sensor_id - A handle that is used to identify and access the
+ *         sensor
+ *  @param[out] msg - Message will be written to this
+ *  @return pldm_completion_codes
+ *  @note	Caller is responsible for memory alloc and dealloc of param
+ * 		'msg.payload'
+ */
+int encode_get_sensor_threshold_req(uint8_t instance_id, uint16_t sensor_id,
+				  struct pldm_msg *msg);
+
+/** @brief Decode GetSensorThreshold response data
+ *
+ *  @param[in] msg - Request message
+ *  @param[in] payload_length - Length of response message payload
+ *  @param[out] completion_code - PLDM completion code
+ *  @param[out] sensor_data_size - The bit width and format of reading and
+ *         threshold values
+ *  @param[out] thresholds - The threshold value indicated by the sensor
+ *  @return pldm_completion_codes
+ */
+
+int decode_get_sensor_threshold_resp(
+    const struct pldm_msg *msg, size_t payload_length, uint8_t *completion_code,
+    uint8_t *sensor_data_size, uint8_t *thresholds);
+
 #ifdef __cplusplus
 }
 #endif
