From d538be2985f8f334d27bdc988a1ff56c3e74707b Mon Sep 17 00:00:00 2001
From: Eason Yang <yhyang2@nuvoton.com>
Date: Wed, 8 Feb 2023 14:32:27 +0800
Subject: [PATCH] main: add feature for updating BootProgress and
 OperatingSystemState properties when host power on

Due to BootProgress and OperatingSystemState of Host state didn't be updated correctly.
Thus, we implement an method to update those states according BIOS POST CODE in phosphor-host-postd.

And we also design a JSON file for customer to specific their BIOS POST CODE according their host motherboard.
Then customer can know the boot progress state when host power on.

Tested: Using RunBMC-Olympus platform to verify it.
Query host state continually when host power on by below curl command:
curl -b cjar -k https://${POLEG_IP}/xyz/openbmc_project/state/enumerate

Result:
"/xyz/openbmc_project/state/host0": {
"BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart",
"OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby" }

Signed-off-by: Eason Yang <yhyang2@nuvoton.com>
---
 lpcsnoop/snoop.hpp |  27 +++++++++
 main.cpp           | 133 +++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 160 insertions(+)

diff --git a/lpcsnoop/snoop.hpp b/lpcsnoop/snoop.hpp
index 9d11ac3..02b91a6 100644
--- a/lpcsnoop/snoop.hpp
+++ b/lpcsnoop/snoop.hpp
@@ -9,6 +9,33 @@ constexpr char snoopObject[] = "/xyz/openbmc_project/state/boot/raw0";
 /* The LPC snoop on port 80h is mapped to this dbus service. */
 constexpr char snoopDbus[] = "xyz.openbmc_project.State.Boot.Raw";
 
+#include <xyz/openbmc_project/State/Boot/Progress/server.hpp>
+#include <xyz/openbmc_project/State/OperatingSystem/Status/server.hpp>
+
+static constexpr const char* POST_CODE_MEM_INIT = "POST_CODE_MEM_INIT";
+static constexpr const char* POST_CODE_PCI_INIT = "POST_CODE_PCI_INIT";
+static constexpr const char* POST_CODE_OS_START = "POST_CODE_OS_START";
+static constexpr const char* POST_CODE_BOARD_INIT = "POST_CODE_BOARD_INIT";
+
+static constexpr const char* HostStateIntfServiceName =
+    "xyz.openbmc_project.State.Host";
+static constexpr const char* HostStateIntfObjectPath =
+    "/xyz/openbmc_project/state/host0";
+static constexpr const char* BootProgressConfigIntfName =
+    "xyz.openbmc_project.State.Boot.Progress";
+static constexpr const char* BootProgressPropertyString =
+    "BootProgress";
+static constexpr const char* OSStatusConfigIntfName =
+    "xyz.openbmc_project.State.OperatingSystem.Status";
+static constexpr const char* OSStatusPropertyString =
+    "OperatingSystemState";
+
+std::variant<std::string> osstart = "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart";
+std::variant<std::string> meminit = "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MemoryInit";
+std::variant<std::string> pciinit = "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit";
+std::variant<std::string> boardinit = "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit";
+std::variant<std::string> standby = "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby";
+
 template <typename... T>
 using ServerObject = typename sdbusplus::server::object_t<T...>;
 using PostInterface = sdbusplus::xyz::openbmc_project::State::Boot::server::Raw;
diff --git a/main.cpp b/main.cpp
index 2c9c7c2..37749d7 100644
--- a/main.cpp
+++ b/main.cpp
@@ -14,6 +14,9 @@
  * limitations under the License.
  */
 
+#include <fstream>
+#include <nlohmann/json.hpp>
+
 #ifdef ENABLE_IPMI_SNOOP
 #include "ipmisnoop/ipmisnoop.hpp"
 #endif
@@ -45,6 +48,90 @@
 static size_t codeSize = 1; /* Size of each POST code in bytes */
 static bool verbose = false;
 
+static constexpr auto biosDefs = "/etc/default/obmc/bios/bios_defs.json";
+uint64_t OS_START, MEM_INIT, PCI_INIT, BOARD_INIT = 0;
+
+/*
+ * 256 bytes is a nice amount.  It's improbable we'd need this many, but its
+ * gives us leg room in the event the driver poll doesn't return in a timely
+ * fashion.  So, mostly arbitrarily chosen.
+ */
+static constexpr size_t BUFFER_SIZE = 256;
+
+int getDbusProperty(const std::string& service,
+                    const std::string& objPath,
+                    const std::string& interface,
+                    const std::string& property,
+                    std::variant<std::string>& value)
+{
+    try
+    {
+        auto bus = sdbusplus::bus::new_default();
+        auto method = bus.new_method_call(service.c_str(), objPath.c_str(),
+                      "org.freedesktop.DBus.Properties", "Get");
+
+        method.append(interface, property);
+        auto reply = bus.call(method);
+        reply.read(value);
+    }
+    catch (const sdbusplus::exception::SdBusError& e)
+    {
+        return -EIO;
+    }
+    return 0;
+}
+
+int setDbusProperty(const std::string& service,
+                    const std::string& objPath,
+                    const std::string& interface,
+                    const std::string& property,
+                    std::variant<std::string>& value)
+{
+    try
+    {
+        auto bus = sdbusplus::bus::new_default();
+        auto method = bus.new_method_call(service.c_str(), objPath.c_str(),
+                      "org.freedesktop.DBus.Properties", "Set");
+
+        method.append(interface, property, value);
+        auto reply = bus.call(method);
+    }
+    catch (const sdbusplus::exception::SdBusError& e)
+    {
+        return -EIO;
+    }
+    return 0;
+}
+
+uint32_t getPostCodeNum(const std::string& biosName)
+{
+    uint32_t num = 0;
+
+    try
+    {
+        std::ifstream biosd{biosDefs};
+        auto json = nlohmann::json::parse(biosd, nullptr, true);
+        auto defs = json["bios_definitions"];
+
+        auto bios = std::find_if(defs.begin(), defs.end(), [&biosName](const auto& g) {
+            auto it = g.find("name");
+            return it != g.end() and it.value() == biosName;
+            });
+
+        if (bios != defs.end())
+        {
+            num = (*bios)["num"];
+            return num;
+        }
+    }
+    catch (std::exception& e)
+    {
+        fprintf(stderr, "%s\n", e.what());
+    }
+
+    return 0;
+}
+
 static void usage(const char* name)
 {
     fprintf(stderr,
@@ -129,6 +216,7 @@ bool rateLimit(PostReporter& reporter, sdeventplus::source::IO& ioSource)
 void PostCodeEventHandler(PostReporter* reporter, sdeventplus::source::IO& s,
                           int postFd, uint32_t)
 {
+    postcode_t postcode;
     uint64_t code = 0;
     ssize_t readb;
 
@@ -145,6 +233,46 @@ void PostCodeEventHandler(PostReporter* reporter, sdeventplus::source::IO& s,
         reporter->value(std::make_tuple(~code, secondary_post_code_t{}), true);
         reporter->value(std::make_tuple(code, secondary_post_code_t{}));
 
+        code = std::get<primary_post_code_t>(postcode);
+        if (code == OS_START)
+        {
+            // Set BootProgress property value to OSStart
+            if (0 != setDbusProperty(HostStateIntfServiceName, HostStateIntfObjectPath,
+                                     BootProgressConfigIntfName,
+                                     BootProgressPropertyString, osstart))
+                return;
+
+            // Set OperatingSystemState property value to Standby
+            if (0 != setDbusProperty(HostStateIntfServiceName, HostStateIntfObjectPath,
+                                     OSStatusConfigIntfName,
+                                     OSStatusPropertyString, standby))
+                return;
+        }
+        else if (code == MEM_INIT)
+        {
+            // Set BootProgress property value to MemoryInit
+            if (0 != setDbusProperty(HostStateIntfServiceName, HostStateIntfObjectPath,
+                                     BootProgressConfigIntfName,
+                                     BootProgressPropertyString, meminit))
+                return;
+        }
+        else if (code == PCI_INIT)
+        {
+            // Set BootProgress property value to PCIInit
+            if (0 != setDbusProperty(HostStateIntfServiceName, HostStateIntfObjectPath,
+                                     BootProgressConfigIntfName,
+                                     BootProgressPropertyString, pciinit))
+                return;
+        }
+        else if (code == BOARD_INIT)
+        {
+            // Set BootProgress property value to MotherboardInit
+            if (0 != setDbusProperty(HostStateIntfServiceName, HostStateIntfObjectPath,
+                                     BootProgressConfigIntfName,
+                                     BootProgressPropertyString, boardinit))
+                return;
+        }
+
         // read depends on old data being cleared since it doens't always read
         // the full code size
         code = 0;
@@ -244,6 +372,11 @@ int main(int argc, char* argv[])
                 break;
             }
             case 'd':
+                // Get POST CODE from JSON configure file.
+                OS_START = getPostCodeNum(POST_CODE_OS_START);
+                MEM_INIT = getPostCodeNum(POST_CODE_MEM_INIT);
+                PCI_INIT = getPostCodeNum(POST_CODE_PCI_INIT);
+                BOARD_INIT = getPostCodeNum(POST_CODE_BOARD_INIT);
 
                 postFd = open(optarg, O_NONBLOCK);
                 if (postFd < 0)
-- 
2.34.1

