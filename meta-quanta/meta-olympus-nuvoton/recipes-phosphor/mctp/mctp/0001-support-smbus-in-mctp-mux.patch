commit f29fa1316991875d69d3cdbd5d663212f0e95e0e
Author: Medad CChien <ctcchien@nuvoton.com>
Date:   Thu Sep 10 13:37:09 2020 +0800

    support mctp over smbus

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3b0097d..9a655ec 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -5,7 +5,7 @@ add_definitions (-DMCTP_HAVE_FILEIO)
 add_definitions (-DMCTP_HAVE_STDIO)
 add_definitions (-DMCTP_DEFAULT_ALLOC)
 
-add_library (mctp STATIC alloc.c astlpc.c core.c log.c libmctp.h serial.c)
+add_library (mctp STATIC alloc.c astlpc.c core.c log.c libmctp.h serial.c smbus.c)
 
 target_include_directories (mctp PUBLIC
                             $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
@@ -37,6 +37,10 @@ add_executable (test_cmds tests/test_cmds.c tests/test-utils.c)
 target_link_libraries (test_cmds mctp)
 add_test (NAME control_commands COMMAND test_cmds)
 
+add_executable (test_smbus tests/test_smbus.c)
+target_link_libraries (test_smbus mctp)
+add_test (NAME smbus COMMAND test_smbus)
+
 install (TARGETS mctp DESTINATION lib)
-install (FILES libmctp.h DESTINATION include)
+install (FILES libmctp.h libmctp-smbus.h DESTINATION include)
 
diff --git a/Makefile.am b/Makefile.am
index d630078..78a0d67 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -16,6 +16,11 @@ libmctp_la_SOURCES += astlpc.c
 include_HEADERS += libmctp-astlpc.h
 endif
 
+if LIBMCTP_BINDING_smbus
+libmctp_la_SOURCES += smbus.c
+include_HEADERS += libmctp-smbus.h
+endif
+
 if HAVE_SYSTEMD
 systemdsystemunit_DATA = \
 	mctp-demux.service
@@ -41,7 +46,8 @@ AM_LDFLAGS = $(CODE_COVERAGE_LDFLAGS)
 TESTS = $(check_PROGRAMS)
 
 check_PROGRAMS = tests/test_eid tests/test_seq tests/test_bridge \
-		 tests/test_astlpc tests/test_serial tests/test_cmds
+		 tests/test_astlpc tests/test_serial tests/test_cmds \
+		 tests/test_smbus
 # We set a global LDADD here, as there's no way to specify it for all
 # tests. This means other targets' LDADDs need to be overridden.
 LDADD = tests/libtest-utils.a libmctp.la
diff --git a/Makefile.inc b/Makefile.inc
index 1ee555d..b294094 100644
--- a/Makefile.inc
+++ b/Makefile.inc
@@ -1,6 +1,6 @@
 LIBMCTP_DIR ?= libmctp/
 LIBMCTP_OBJS = core.o alloc.o log.o
-LIBMCTP_BINDINGS ?= serial astlpc
+LIBMCTP_BINDINGS ?= serial astlpc smbus
 
 LIBMCTP_OBJS += $(LIBMCTP_BINDINGS:%=%.o)
 
diff --git a/configure.ac b/configure.ac
index eaa9b7e..9fbe32d 100644
--- a/configure.ac
+++ b/configure.ac
@@ -126,6 +126,7 @@ free(malloc(4096));
 # Enable all bindings. AC_ARG_ENABLE in future.
 AM_CONDITIONAL([LIBMCTP_BINDING_serial], [true])
 AM_CONDITIONAL([LIBMCTP_BINDING_astlpc], [true])
+AM_CONDITIONAL([LIBMCTP_BINDING_smbus], [true])
 
 # Check for valgrind
 AS_IF([test "x$enable_tests" = "xno"], [enable_valgrind=no])
diff --git a/core.c b/core.c
index 0be8c69..2ea7756 100644
--- a/core.c
+++ b/core.c
@@ -58,6 +58,12 @@ struct mctp {
 		ROUTE_BRIDGE,
 	}			route_policy;
 	size_t max_message_size;
+	/* Control message RX callback. */
+	mctp_rx_fn	control_rx;
+	void		*control_rx_data;
+
+	/* Endpoint UUID */
+	guid_t uuid;
 };
 
 #ifndef BUILD_ASSERT
@@ -75,8 +81,17 @@ struct mctp {
 #define MCTP_MAX_MESSAGE_SIZE 65536
 #endif
 
-static int mctp_message_tx_on_bus(struct mctp_bus *bus, mctp_eid_t src,
-				  mctp_eid_t dest, void *msg, size_t msg_len);
+static int mctp_message_tx_on_bus(struct mctp *mctp, struct mctp_bus *bus,
+				  mctp_eid_t src, mctp_eid_t dest, void *msg,
+				  size_t msg_len);
+
+/*
+ * Receive the complete MCTP message and route it.
+ * Asserts:
+ *     'buf' is not NULL.
+ */
+static void mctp_rx(struct mctp *mctp, struct mctp_bus *bus,
+		mctp_eid_t src, mctp_eid_t dest, void *buf, size_t len);
 
 struct mctp_pktbuf *mctp_pktbuf_alloc(struct mctp_binding *binding, size_t len)
 {
@@ -350,53 +365,6 @@ int mctp_bridge_busses(struct mctp *mctp,
 	return 0;
 }
 
-static inline bool mctp_ctrl_cmd_is_transport(struct mctp_ctrl_msg_hdr *hdr)
-{
-	return ((hdr->command_code >= MCTP_CTRL_CMD_FIRST_TRANSPORT) &&
-		(hdr->command_code <= MCTP_CTRL_CMD_LAST_TRANSPORT));
-}
-
-static bool mctp_ctrl_handle_msg(struct mctp_bus *bus, mctp_eid_t src,
-				 void *buffer, size_t length)
-{
-	struct mctp_ctrl_msg_hdr *msg_hdr = buffer;
-
-	/*
-	 * Control message is received. If a transport control message handler
-	 * is provided, it will called. If there is no dedicated handler, this
-	 * function returns false and data can be handled by the generic
-	 * message handler. The transport control message handler will be
-	 * provided with messages in the command range 0xF0 - 0xFF.
-	 */
-	if (mctp_ctrl_cmd_is_transport(msg_hdr)) {
-		if (bus->binding->control_rx != NULL) {
-			/* MCTP bus binding handler */
-			bus->binding->control_rx(src,
-						 bus->binding->control_rx_data,
-						 buffer, length);
-			return true;
-		}
-	}
-
-	/*
-	 * Command was not handled, due to lack of specific callback.
-	 * It will be passed to regular message_rx handler.
-	 */
-	return false;
-}
-
-static inline bool mctp_rx_dest_is_local(struct mctp_bus *bus, mctp_eid_t dest)
-{
-	return dest == bus->eid || dest == MCTP_EID_NULL ||
-	       dest == MCTP_EID_BROADCAST;
-}
-
-static inline bool mctp_ctrl_cmd_is_request(struct mctp_ctrl_msg_hdr *hdr)
-{
-	return hdr->ic_msg_type == MCTP_CTRL_HDR_MSG_TYPE &&
-	       hdr->rq_dgram_inst & MCTP_CTRL_HDR_FLAG_REQUEST;
-}
-
 /*
  * Receive the complete MCTP message and route it.
  * Asserts:
@@ -408,25 +376,30 @@ static void mctp_rx(struct mctp *mctp, struct mctp_bus *bus, mctp_eid_t src,
 	assert(buf != NULL);
 
 	if (mctp->route_policy == ROUTE_ENDPOINT &&
-	    mctp_rx_dest_is_local(bus, dest)) {
-		/* Handle MCTP Control Messages: */
-		if (len >= sizeof(struct mctp_ctrl_msg_hdr)) {
-			struct mctp_ctrl_msg_hdr *msg_hdr = buf;
+	    (dest == bus->eid || dest == MCTP_EID_NULL ||
+	     dest == MCTP_EID_BROADCAST)) {
+		/*
+		 * Identify if this is a control request message.
+		 * See DSP0236 v1.3.0 sec. 11.5.
+		 */
+		struct mctp_ctrl_msg_hdr *msg_hdr = buf;
+		if ((msg_hdr != NULL) &&
+		    (len >= sizeof(struct mctp_ctrl_msg_hdr)) &&
+		    (msg_hdr->ic_msg_type == MCTP_CTRL_HDR_MSG_TYPE) &&
+		    (msg_hdr->rq_dgram_inst & MCTP_CTRL_HDR_FLAG_REQUEST)) {
 
 			/*
-			 * Identify if this is a control request message.
-			 * See DSP0236 v1.3.0 sec. 11.5.
+			 * mctp_ctrl_handle_msg returning true means that the message
+			 * was handled by the control callbacks. There is no need to
+			 * handle it in the default callback.
 			 */
-			if (mctp_ctrl_cmd_is_request(msg_hdr)) {
-				bool handled;
-				handled = mctp_ctrl_handle_msg(bus, src, buf,
-							       len);
-				if (handled)
-					return;
-			}
+			if (mctp_ctrl_handle_msg(mctp, bus, src, dest, buf,
+						 len))
+				return;
 		}
 		if (mctp->message_rx)
 			mctp->message_rx(src, mctp->message_rx_data, buf, len);
+		return;
 	}
 
 	if (mctp->route_policy == ROUTE_BRIDGE) {
@@ -437,7 +410,8 @@ static void mctp_rx(struct mctp *mctp, struct mctp_bus *bus, mctp_eid_t src,
 			if (dest_bus == bus)
 				continue;
 
-			mctp_message_tx_on_bus(dest_bus, src, dest, buf, len);
+			mctp_message_tx_on_bus(mctp, dest_bus, src, dest, buf,
+							len);
 		}
 
 	}
@@ -589,8 +563,9 @@ void mctp_binding_set_tx_enabled(struct mctp_binding *binding, bool enable)
 		mctp_send_tx_queue(bus);
 }
 
-static int mctp_message_tx_on_bus(struct mctp_bus *bus, mctp_eid_t src,
-				  mctp_eid_t dest, void *msg, size_t msg_len)
+static int mctp_message_tx_on_bus(struct mctp *mctp, struct mctp_bus *bus,
+				  mctp_eid_t src, mctp_eid_t dest, void *msg,
+				  size_t msg_len)
 {
 	size_t max_payload_len, payload_len, p;
 	struct mctp_pktbuf *pkt;
@@ -651,5 +626,272 @@ int mctp_message_tx(struct mctp *mctp, mctp_eid_t eid,
 	struct mctp_bus *bus;
 
 	bus = find_bus_for_eid(mctp, eid);
-	return mctp_message_tx_on_bus(bus, bus->eid, eid, msg, msg_len);
+	return mctp_message_tx_on_bus(mctp, bus, bus->eid, eid, msg, msg_len);
+}
+
+static inline bool mctp_ctrl_cmd_is_control(struct mctp_ctrl_msg_hdr *hdr)
+{
+	return ((hdr->command_code > MCTP_CTRL_CMD_RESERVED) &&
+		(hdr->command_code < MCTP_CTRL_CMD_MAX));
+}
+
+static inline bool mctp_ctrl_cmd_is_transport(struct mctp_ctrl_msg_hdr *hdr)
+{
+	return ((hdr->command_code >= MCTP_CTRL_CMD_FIRST_TRANSPORT) &&
+		(hdr->command_code <= MCTP_CTRL_CMD_LAST_TRANSPORT));
+}
+
+static void mctp_ctrl_send_empty_response(struct mctp *mctp,
+					  mctp_eid_t src,
+					  uint8_t command_code,
+					  uint8_t response_code) {
+	struct mctp_ctrl_msg_hdr response_data;
+
+	memset(&response_data, 0, sizeof(response_data));
+	response_data.command_code = command_code;
+	response_data.completion_code = response_code;
+	response_data.ic_msg_type = MCTP_CTRL_HDR_MSG_TYPE;
+	mctp_message_tx(mctp, src, &response_data,
+			sizeof(response_data));
+}
+bool mctp_ctrl_handle_msg(struct mctp *mctp, struct mctp_bus *bus,
+			  mctp_eid_t src, mctp_eid_t dest, void *buffer,
+			  size_t length)
+{
+	struct mctp_ctrl_msg_hdr *msg_hdr = (struct mctp_ctrl_msg_hdr *)buffer;
+	/* Control message is received.
+	 * If dedicated control messages handler is provided, it will be used.
+	 * If there is no dedicated handler, this function returns false and data
+	 * can be handled by the generic message handler. There are two control
+	 * messages handlers available. First one is located in struct mctp and
+	 * handles command codes from 0x01 to 0x14 and the second one is a part
+	 * of struct mctp_binding, as 0xF0 - 0xFF command codes are transport
+	 * specific. */
+	if (mctp_ctrl_cmd_is_control(msg_hdr)) {
+		if (mctp->control_rx != NULL) {
+			/* MCTP endpoint handler */
+			mctp->control_rx(src, mctp->control_rx_data, buffer,
+					 length);
+			return true;
+		}
+	} else if (mctp_ctrl_cmd_is_transport(msg_hdr)) {
+		if (bus->binding->control_rx != NULL) {
+			/* MCTP bus binding handler */
+			bus->binding->control_rx(src,
+						 bus->binding->control_rx_data,
+						 buffer, length);
+			return true;
+		}
+	} else {
+		/* Unrecognized command code. */
+		mctp_ctrl_send_empty_response(mctp, src, msg_hdr->command_code,
+					      MCTP_CTRL_CC_ERROR_UNSUPPORTED_CMD);
+		return true;
+	}
+	/*
+	 * Command was not handled, due to lack of specific callback.
+	 * It will be passed to regular message_rx handler.
+	 */
+	return false;
+}
+
+int mctp_set_rx_ctrl(struct mctp *mctp, mctp_rx_fn fn, void *data)
+{
+	mctp->control_rx = fn;
+	mctp->control_rx_data = data;
+	return 0;
 }
+
+/* TODO: Will be revisiting the instance id management is done by upper
+ * layer or the control command by itself.
+ */
+static void encode_ctrl_cmd_header(struct mctp_ctrl_hdr *mctp_ctrl_hdr,
+				   uint8_t rq_dgram_inst, uint8_t cmd_code)
+{
+	mctp_ctrl_hdr->ic_msg_type = MCTP_CTRL_HDR_MSG_TYPE;
+	mctp_ctrl_hdr->rq_dgram_inst = rq_dgram_inst;
+	mctp_ctrl_hdr->command_code = cmd_code;
+}
+
+bool mctp_encode_ctrl_cmd_set_eid(struct mctp_ctrl_cmd_set_eid *set_eid_cmd,
+				  uint8_t rq_dgram_inst,
+				  mctp_ctrl_cc_set_eid_op op, uint8_t eid)
+{
+	if (!set_eid_cmd)
+		return false;
+
+	encode_ctrl_cmd_header(&set_eid_cmd->ctrl_msg_hdr, rq_dgram_inst,
+			       MCTP_CTRL_CMD_SET_ENDPOINT_ID);
+	set_eid_cmd->operation = op;
+	set_eid_cmd->eid = eid;
+	return true;
+}
+
+bool encode_ctrl_cmd_get_eid(struct mctp_ctrl_cmd_get_eid *get_eid_cmd,
+			     uint8_t rq_dgram_inst)
+{
+	if (!get_eid_cmd)
+		return false;
+
+	encode_ctrl_cmd_header(&get_eid_cmd->ctrl_msg_hdr, rq_dgram_inst,
+			       MCTP_CTRL_CMD_GET_ENDPOINT_ID);
+	return true;
+}
+
+bool encode_ctrl_cmd_get_uuid(struct mctp_ctrl_cmd_get_uuid *get_uuid_cmd,
+			      uint8_t rq_dgram_inst)
+{
+	if (!get_uuid_cmd)
+		return false;
+
+	encode_ctrl_cmd_header(&get_uuid_cmd->ctrl_msg_hdr, rq_dgram_inst,
+			       MCTP_CTRL_CMD_GET_ENDPOINT_UUID);
+	return true;
+}
+
+bool encode_ctrl_cmd_get_ver_support(
+	struct mctp_ctrl_cmd_get_mctp_ver_support *mctp_ver_support_cmd,
+	uint8_t rq_dgram_inst, uint8_t msg_type_number)
+{
+	if (!mctp_ver_support_cmd)
+		return false;
+
+	encode_ctrl_cmd_header(&mctp_ver_support_cmd->ctrl_msg_hdr,
+			       rq_dgram_inst,
+			       MCTP_CTRL_CMD_GET_VERSION_SUPPORT);
+	mctp_ver_support_cmd->msg_type_number = msg_type_number;
+	return true;
+}
+
+bool encode_ctrl_cmd_get_msg_type_support(
+	struct mctp_ctrl_get_msg_type_support *msg_type_support_cmd,
+	uint8_t rq_dgram_inst)
+{
+	if (!msg_type_support_cmd)
+		return false;
+
+	encode_ctrl_cmd_header(&msg_type_support_cmd->ctrl_msg_hdr,
+			       rq_dgram_inst,
+			       MCTP_CTRL_CMD_GET_MESSAGE_TYPE_SUPPORT);
+	return true;
+}
+
+bool encode_ctrl_cmd_get_vdm_support(
+	struct mctp_ctrl_cmd_get_vdm_support *vdm_support_cmd,
+	uint8_t rq_dgram_inst, uint8_t v_id_set_selector)
+{
+	if (!vdm_support_cmd)
+		return false;
+
+	encode_ctrl_cmd_header(&vdm_support_cmd->ctrl_msg_hdr, rq_dgram_inst,
+			       MCTP_CTRL_CMD_GET_VENDOR_MESSAGE_SUPPORT);
+	vdm_support_cmd->vendor_id_set_selector = v_id_set_selector;
+	return true;
+}
+
+static inline mctp_eid_t mctp_bus_get_eid(struct mctp_bus *bus)
+{
+	return bus->eid;
+}
+
+static inline void mctp_bus_set_eid(struct mctp_bus *bus, mctp_eid_t eid)
+{
+	bus->eid = eid;
+}
+
+/*
+ * @brief Sets the EID accordingly to the provided policy and creates response.
+ * See DSP0236 1.3.0 12.3
+ */
+int mctp_ctrl_cmd_set_endpoint_id(struct mctp *mctp, struct mctp_bus *bus,
+				  struct mctp_ctrl_cmd_set_eid *request,
+				  struct mctp_ctrl_resp_set_eid *response)
+{
+	if (!request || !response)
+		return -1;
+	if (request->eid == MCTP_EID_BROADCAST ||
+	    request->eid == MCTP_EID_NULL) {
+		response->completion_code = MCTP_CTRL_CC_ERROR_INVALID_DATA;
+		response->eid_set = mctp_bus_get_eid(bus);
+		return 0;
+	}
+
+	switch (request->operation) {
+	case 0: /* Set EID */
+		/* TODO: Add tracking for bus owner and static reassignment. */
+		if (mctp->n_busses == 1 || bus->eid == 0x0) {
+			mctp_bus_set_eid(bus, request->eid);
+			response->eid_set = request->eid;
+			MCTP_SET_EID_STATUS(MCTP_SET_EID_ACCEPTED,
+					    response->status);
+			/* TODO: fix the status field. */
+		} else {
+			MCTP_SET_EID_STATUS(MCTP_SET_EID_REJECTED,
+					    response->status);
+			response->eid_set = bus->eid;
+		}
+		response->completion_code = MCTP_CTRL_CC_SUCCESS;
+		break;
+	case 1: /* Force EID */
+		/* TODO: Need to figure out for static EID devices */
+		mctp_bus_set_eid(bus, request->eid);
+		response->completion_code = MCTP_CTRL_CC_SUCCESS;
+		response->eid_set = request->eid;
+		break;
+	default: /* Reset EID and Set Discovered Flag */
+		response->completion_code = MCTP_CTRL_CC_ERROR_UNSUPPORTED_CMD;
+	}
+	return 0;
+}
+
+/*
+ * @brief Retrieves a byte of medium-specific data from the binding.
+ * See DSP0236 1.3.0 12.4 (byte 4).
+ */
+uint8_t mctp_binding_get_medium_info(struct mctp_binding *binding)
+{
+	return binding->info;
+}
+
+/*
+ * @brief Creates control message response for Get Endpoint ID.
+ * See DSP0236 1.3.0 12.4.
+ */
+int mctp_ctrl_cmd_get_endpoint_id(struct mctp *mctp, struct mctp_bus *bus,
+				  bool bus_owner,
+				  struct mctp_ctrl_resp_get_eid *response)
+{
+	if (response == NULL)
+		return -1;
+	response->eid = mctp_bus_get_eid(bus);
+	response->eid_type = 0;
+	if (mctp->route_policy == ROUTE_BRIDGE ||
+	    bus_owner == true) {
+		response->eid_type |= (1 << 4);
+	}
+	/* TODO: support dynamic EID? */
+	response->eid_type |= (1 << 1);
+	response->medium_data = mctp_binding_get_medium_info(bus->binding);
+	response->completion_code = MCTP_CTRL_CC_SUCCESS;
+	return 0;
+}
+
+/*
+ * @brief Creates control message response for Get Endpoint UUID.
+ * See DSP0236 1.3.0 12.5.
+ */
+int mctp_ctrl_cmd_get_endpoint_uuid(struct mctp *mctp,
+				    struct mctp_ctrl_resp_get_uuid *response)
+{
+	if (response == NULL)
+		return -1;
+	response->completion_code = MCTP_CTRL_CC_SUCCESS;
+	response->uuid = mctp->uuid;
+	return 0;
+}
+
+void mctp_set_uuid(struct mctp *mctp, guid_t uuid)
+{
+	mctp->uuid = uuid;
+}
+
diff --git a/libmctp-cmds.h b/libmctp-cmds.h
index 293aca4..327d002 100644
--- a/libmctp-cmds.h
+++ b/libmctp-cmds.h
@@ -20,6 +20,49 @@ struct mctp_ctrl_msg_hdr {
 	uint8_t completion_code;
 };
 
+/*TODO: Need to combine this structure with the above one.*/
+struct mctp_ctrl_hdr {
+	uint8_t ic_msg_type;
+	uint8_t rq_dgram_inst;
+	uint8_t command_code;
+} __attribute__((__packed__));
+
+typedef enum {
+	set_eid,
+	force_eid,
+	reset_eid,
+	set_discovered_flag
+} mctp_ctrl_cc_set_eid_op;
+
+struct mctp_ctrl_cmd_set_eid {
+	struct mctp_ctrl_hdr ctrl_msg_hdr;
+	mctp_ctrl_cc_set_eid_op operation : 2;
+	uint8_t : 6;
+	uint8_t eid;
+} __attribute__((__packed__));
+
+struct mctp_ctrl_cmd_get_eid {
+	struct mctp_ctrl_hdr ctrl_msg_hdr;
+} __attribute__((__packed__));
+
+struct mctp_ctrl_cmd_get_uuid {
+	struct mctp_ctrl_hdr ctrl_msg_hdr;
+} __attribute__((__packed__));
+
+struct mctp_ctrl_cmd_get_mctp_ver_support {
+	struct mctp_ctrl_hdr ctrl_msg_hdr;
+	uint8_t msg_type_number;
+} __attribute__((__packed__));
+
+struct mctp_ctrl_get_msg_type_support {
+	struct mctp_ctrl_hdr ctrl_msg_hdr;
+} __attribute__((__packed__));
+
+struct mctp_ctrl_cmd_get_vdm_support {
+	struct mctp_ctrl_hdr ctrl_msg_hdr;
+	uint8_t vendor_id_set_selector;
+} __attribute__((__packed__));
+
 #define MCTP_CTRL_HDR_MSG_TYPE	       0
 #define MCTP_CTRL_HDR_FLAG_REQUEST     (1 << 7)
 #define MCTP_CTRL_HDR_FLAG_DGRAM       (1 << 6)
@@ -59,14 +102,86 @@ struct mctp_ctrl_msg_hdr {
  * MCTP Control Completion Codes
  * See DSP0236 v1.3.0 Table 13.
  */
-#define MCTP_CTRL_CC_SUCCESS		   0x00
-#define MCTP_CTRL_CC_ERROR		   0x01
-#define MCTP_CTRL_CC_ERROR_INVALID_DATA	   0x02
-#define MCTP_CTRL_CC_ERROR_INVALID_LENGTH  0x03
-#define MCTP_CTRL_CC_ERROR_NOT_READY	   0x04
-#define MCTP_CTRL_CC_ERROR_UNSUPPORTED_CMD 0x05
+#define MCTP_CTRL_CC_SUCCESS                0x00
+#define MCTP_CTRL_CC_ERROR                  0x01
+#define MCTP_CTRL_CC_ERROR_INVALID_DATA     0x02
+#define MCTP_CTRL_CC_ERROR_INVALID_LENGTH   0x03
+#define MCTP_CTRL_CC_ERROR_NOT_READY        0x04
+#define MCTP_CTRL_CC_ERROR_UNSUPPORTED_CMD  0x05
 /* 0x80 - 0xFF are command specific */
 
+#define MCTP_CTRL_CC_SET_EID_OP_MASK 0x03
+
+/* MCTP Set Endpoint ID response fields
+ * See DSP0236 v1.3.0 Table 14.
+ */
+#define MCTP_SET_EID_STATUS(status, field)                                     \
+	field = ((field)&0xcf) | ((status) << 4)
+#define MCTP_SET_EID_ACCEPTED 0x0
+#define MCTP_SET_EID_REJECTED 0x1
+typedef union {
+	struct {
+		uint32_t data0;
+		uint16_t data1;
+		uint16_t data2;
+		uint16_t data3;
+		uint8_t data4[6];
+	} __attribute__((__packed__)) canonical;
+	uint8_t raw[16];
+} guid_t;
+
+struct mctp_ctrl_resp_get_eid {
+	struct mctp_ctrl_msg_hdr ctrl_hdr;
+	uint8_t completion_code;
+	mctp_eid_t eid;
+	uint8_t eid_type;
+	uint8_t medium_data;
+
+} __attribute__((__packed__));
+
+struct mctp_ctrl_resp_get_uuid {
+	struct mctp_ctrl_msg_hdr ctrl_hdr;
+	uint8_t completion_code;
+	guid_t uuid;
+} __attribute__((__packed__));
+
+struct mctp_ctrl_resp_set_eid {
+	struct mctp_ctrl_msg_hdr ctrl_hdr;
+	uint8_t completion_code;
+	uint8_t status;
+	mctp_eid_t eid_set;
+	uint8_t eid_pool_size;
+} __attribute__((__packed__));
+
+bool mctp_ctrl_handle_msg(struct mctp *mctp, struct mctp_bus *bus,
+			  mctp_eid_t src, mctp_eid_t dest, void *buffer, size_t length);
+
+int mctp_set_rx_ctrl(struct mctp *mctp, mctp_rx_fn fn, void *data);
+
+bool mctp_encode_ctrl_cmd_set_eid(struct mctp_ctrl_cmd_set_eid *set_eid_cmd,
+				  uint8_t rq_dgram_inst,
+				  mctp_ctrl_cc_set_eid_op op, uint8_t eid);
+
+bool encode_ctrl_cmd_get_eid(struct mctp_ctrl_cmd_get_eid *get_eid_cmd,
+			     uint8_t rq_dgram_inst);
+
+bool encode_ctrl_cmd_get_uuid(struct mctp_ctrl_cmd_get_uuid *get_uuid_cmd,
+			      uint8_t rq_dgram_inst);
+
+bool encode_ctrl_cmd_get_ver_support(
+	struct mctp_ctrl_cmd_get_mctp_ver_support *mctp_ver_support_cmd,
+	uint8_t rq_dgram_inst, uint8_t msg_type_number);
+
+bool encode_ctrl_cmd_get_msg_type_support(
+	struct mctp_ctrl_get_msg_type_support *msg_type_support_cmd,
+	uint8_t rq_dgram_inst);
+
+bool encode_ctrl_cmd_get_vdm_support(
+	struct mctp_ctrl_cmd_get_vdm_support *vdm_support_cmd,
+	uint8_t rq_dgram_inst, uint8_t v_id_set_selector);
+
+void mctp_set_uuid(struct mctp *mctp, guid_t uuid);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/libmctp-smbus.h b/libmctp-smbus.h
new file mode 100644
index 0000000..b7d9d93
--- /dev/null
+++ b/libmctp-smbus.h
@@ -0,0 +1,47 @@
+#ifndef LIBMCTP_SMBUS_H
+#define LIBMCTP_SMBUS_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include "libmctp.h"
+
+#define MCTP_HEADER_SIZE 4
+#define MCTP_PAYLOAD_SIZE 64
+
+#define SMBUS_HEADER_SIZE 4
+#define SMBUS_PEC_BYTE_SIZE 1
+
+#define SMBUS_TX_BUFF_SIZE                                                     \
+	((MCTP_HEADER_SIZE) + (SMBUS_HEADER_SIZE) + (MCTP_PAYLOAD_SIZE) +      \
+	 (SMBUS_PEC_BYTE_SIZE))
+struct mctp_binding_smbus {
+	struct mctp_binding binding;
+	int out_fd;
+	int in_fd;
+
+	unsigned long bus_id;
+
+	/* receive buffer */
+	uint8_t rxbuf[1024];
+	struct mctp_pktbuf *rx_pkt;
+
+	/* temporary transmit buffer */
+	uint8_t txbuf[SMBUS_TX_BUFF_SIZE];
+};
+
+struct mctp_binding_smbus *mctp_smbus_init(void);
+void mctp_smbus_register_bus(struct mctp_binding_smbus *smbus,
+			     struct mctp *mctp, mctp_eid_t eid);
+int mctp_smbus_read(struct mctp_binding_smbus *smbus);
+void mctp_smbus_free(struct mctp_binding_smbus *smbus);
+int mctp_smbus_get_in_fd(struct mctp_binding_smbus *smbus);
+int mctp_smbus_set_in_fd(struct mctp_binding_smbus *smbus, int fd);
+int mctp_smbus_set_out_fd(struct mctp_binding_smbus *smbus, int fd);
+void mctp_binding_set_slave_addr_callback(int (*slaveAddrCallback)(uint8_t,
+								   uint8_t *));
+#ifdef __cplusplus
+}
+#endif
+#endif /*LIBMCTP_SMBUS_H */
diff --git a/libmctp.h b/libmctp.h
index 00bce29..032e850 100644
--- a/libmctp.h
+++ b/libmctp.h
@@ -108,6 +108,7 @@ struct mctp_binding {
 	int (*tx)(struct mctp_binding *binding, struct mctp_pktbuf *pkt);
 	mctp_rx_fn control_rx;
 	void *control_rx_data;
+	uint8_t info;
 };
 
 void mctp_binding_set_tx_enabled(struct mctp_binding *binding, bool enable);
diff --git a/mctp-demux.service b/mctp-demux.service
index ad09b30..d698660 100644
--- a/mctp-demux.service
+++ b/mctp-demux.service
@@ -3,9 +3,8 @@ Description=MCTP demultiplexer daemon
 
 [Service]
 Restart=always
-Environment=DEMUX_BINDING_OPTS=null
-EnvironmentFile=-/etc/default/mctp
-ExecStart=/usr/bin/mctp-demux-daemon $DEMUX_BINDING_OPTS
+Environment=DEMUX_BINDING_OPTS=smbus
+ExecStart=/usr/bin/mctp-demux-daemon $DEMUX_BINDING_OPTS 2 10
 SyslogIdentifier=mctp-demux
 
 [Install]
diff --git a/smbus.c b/smbus.c
new file mode 100644
index 0000000..2e4e097
--- /dev/null
+++ b/smbus.c
@@ -0,0 +1,306 @@
+/* SPDX-License-Identifier: Apache-2.0 */
+
+#include <assert.h>
+#include <stdbool.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+#include <errno.h>
+
+#ifdef MCTP_HAVE_FILEIO
+#include <fcntl.h>
+#endif
+
+#define pr_fmt(x) "smbus: " x
+
+//#include <i2c/smbus.h>
+#include <linux/i2c-dev.h>
+#include <linux/i2c.h>
+#include <sys/ioctl.h>
+
+#include "libmctp-alloc.h"
+#include "libmctp-log.h"
+#include "libmctp-smbus.h"
+#include "libmctp.h"
+
+#ifndef container_of
+#define container_of(ptr, type, member)                                        \
+	(type *)((char *)(ptr) - (char *)&((type *)0)->member)
+#endif
+
+#define binding_to_smbus(b) container_of(b, struct mctp_binding_smbus, binding)
+
+#define MCTP_COMMAND_CODE 0x0F
+#define MCTP_SLAVE_ADDR_INDEX 0
+
+//8bit:0x20;7bit:0x10 => NCT6681 only response to i2c slave address 0x20
+#define MCTP_SOURCE_SLAVE_ADDRESS 0x21
+
+#define SMBUS_COMMAND_CODE_SIZE 1
+#define SMBUS_LENGTH_FIELD_SIZE 1
+#define SMBUS_ADDR_OFFSET_SLAVE 0x1000
+
+struct mctp_smbus_header {
+	uint8_t destination_slave_address;
+	uint8_t command_code;
+	uint8_t byte_count;
+	uint8_t source_slave_address;
+};
+
+static uint8_t crc8_calculate(uint16_t d)
+{
+	const uint32_t polyCheck = 0x1070 << 3;
+	int i;
+
+	for (i = 0; i < 8; i++) {
+		if (d & 0x8000) {
+			d = d ^ polyCheck;
+		}
+		d = d << 1;
+	}
+
+	return (uint8_t)(d >> 8);
+}
+
+/* Incremental CRC8 over count bytes in the array pointed to by p */
+static uint8_t pec_calculate(uint8_t *p, size_t count)
+{
+	int i;
+	uint8_t crc = 0;
+	for (i = 0; i < count; i++) {
+		crc = crc8_calculate((crc ^ p[i]) << 8);
+	}
+	return crc;
+}
+
+static uint8_t calculate_pec_byte(uint8_t *buf, size_t len, uint16_t flags)
+{
+	buf[MCTP_SLAVE_ADDR_INDEX] =
+		(buf[MCTP_SLAVE_ADDR_INDEX] << 1) | (flags & I2C_M_RD ? 1 : 0);
+	uint8_t pec = pec_calculate(buf, len);
+
+	return pec;
+}
+
+static int mctp_smbus_tx(struct mctp_binding_smbus *smbus, uint8_t len)
+{
+#ifdef I2C_M_HOLD
+	/* Hold message */
+	uint16_t holdtimeout = 1000; // timeout in ms.
+	struct i2c_msg msg[2] =
+#else // !I2C_M_HOLD
+	struct i2c_msg msg[1] =
+#endif // I2C_M_HOLD
+		{ { .addr = smbus->txbuf[0] >> 1, // seven bit address
+		    .flags = 0,
+		    .len = len-1,
+		    .buf = (uint8_t *)&smbus->txbuf[1] }
+#ifdef I2C_M_HOLD
+		  ,
+		  { .addr = 0,
+		    .flags = I2C_M_HOLD,
+		    .len = sizeof(holdtimeout),
+		    .buf = (uint8_t *)&holdtimeout }
+#endif // I2C_M_HOLD
+		};
+
+#ifdef I2C_M_HOLD
+	struct i2c_rdwr_ioctl_data msgrdwr = { &msg[0], 2 };
+#else // !I2C_M_HOLD
+	struct i2c_rdwr_ioctl_data msgrdwr = { &msg[0], 1 };
+#endif // I2C_M_HOLD
+
+	return ioctl(smbus->out_fd, I2C_RDWR, &msgrdwr);
+}
+
+#ifdef I2C_M_HOLD
+static int mctp_smbus_unhold_bus(struct mctp_binding_smbus *smbus)
+{
+	/* Unhold message */
+	uint16_t holdtimeout = 0; // unhold
+	struct i2c_msg holdmsg = { 0, I2C_M_HOLD, sizeof(holdtimeout),
+				   (uint8_t *)&holdtimeout };
+
+	struct i2c_rdwr_ioctl_data msgrdwr = { &holdmsg, 1 };
+
+	return ioctl(smbus->out_fd, I2C_RDWR, &msgrdwr);
+}
+#endif // I2C_M_HOLD
+
+int (*getSlaveAddrCallback)(uint8_t, uint8_t *) = 0;
+void mctp_binding_set_slave_addr_callback(int (*slaveAddrCallback)(uint8_t,
+								   uint8_t *))
+{
+	getSlaveAddrCallback = slaveAddrCallback;
+}
+
+static int mctp_binding_smbus_tx(struct mctp_binding *b,
+				 struct mctp_pktbuf *pkt)
+{
+	struct mctp_binding_smbus *smbus = binding_to_smbus(b);
+	struct mctp_smbus_header *smbus_hdr = (void *)smbus->txbuf;
+	struct mctp_hdr *hdr = (void *)(smbus->txbuf + sizeof(*smbus_hdr));
+	uint8_t destSlaveAddr = 0;
+	int j;
+	printf("CS20 mctp_binding_smbus_tx\n");
+	if (!getSlaveAddrCallback ||
+	    getSlaveAddrCallback(hdr->dest, &destSlaveAddr) < 0) {
+		mctp_prerr(
+			"get save address callbcack not set or error in getting "
+			"destination slave address");
+		return -1;
+	}
+	smbus_hdr->destination_slave_address = destSlaveAddr;
+	smbus_hdr->command_code = MCTP_COMMAND_CODE;
+
+	/* the length field in the header excludes smbus framing
+     * and escape sequences */
+	size_t pkt_length = mctp_pktbuf_size(pkt);
+	smbus_hdr->byte_count = pkt_length + 1;
+	smbus_hdr->source_slave_address = MCTP_SOURCE_SLAVE_ADDRESS;
+
+	size_t txBufLen = sizeof(*smbus_hdr);
+	uint8_t i2c_message_len = txBufLen + pkt_length + SMBUS_PEC_BYTE_SIZE;
+	if (i2c_message_len > sizeof(smbus->txbuf)) {
+		mctp_prerr(
+			"tx message length exceeds max smbus message lenght");
+		return -1;
+	}
+
+	memcpy(smbus->txbuf + txBufLen, &pkt->data[pkt->start], pkt_length);
+	txBufLen += pkt_length;
+	smbus->txbuf[txBufLen] = calculate_pec_byte(smbus->txbuf, txBufLen, 0);
+
+	if (mctp_smbus_tx(smbus, i2c_message_len)< 0) {
+		mctp_prerr("mctp_smbus_tx error: %s\n", strerror(errno));
+		return -1;
+	}
+
+	return 0;
+}
+
+#ifdef MCTP_HAVE_FILEIO
+int mctp_smbus_read(struct mctp_binding_smbus *smbus)
+{
+	ssize_t len = 0;
+	struct mctp_smbus_header *smbus_hdr;
+
+	int ret = lseek(smbus->in_fd, 0, SEEK_SET);
+	if (ret < 0) {
+		mctp_prerr("Failed to seek");
+		return -1;
+	}
+
+	len = read(smbus->in_fd, smbus->rxbuf, sizeof(smbus->rxbuf));
+	if (len < sizeof(*smbus_hdr)) {
+		// This condition hits from from time to time, even with
+		// a properly written poll loop, although it's not clear
+		// why. Return an error so that the upper layer can
+		// retry.
+		//printf("read len %d less than smbus_hdr %d\n",len ,sizeof(*smbus_hdr));
+		return len;
+	}
+
+	smbus_hdr = (void *)smbus->rxbuf;
+	if (smbus_hdr->destination_slave_address !=
+	    (MCTP_SOURCE_SLAVE_ADDRESS & ~1)) {
+		mctp_prerr("Got bad slave address %d",
+			   smbus_hdr->destination_slave_address);
+		return 0;
+	}
+	if (smbus_hdr->command_code != MCTP_COMMAND_CODE) {
+		mctp_prerr("Got bad command code %d", smbus_hdr->command_code);
+		// Not a payload intended for us
+		return 0;
+	}
+
+	if (smbus_hdr->byte_count != (len - sizeof(*smbus_hdr))) {
+		// Got an incorrectly sized payload
+		mctp_prerr("Got smbus payload sized %d, expecting %d",
+			   smbus_hdr->byte_count, len - sizeof(*smbus_hdr));
+		return 0;
+	}
+
+	if (len < 0) {
+		mctp_prerr("can't read from smbus device: %m");
+		return len;
+	}
+
+	smbus->rx_pkt = mctp_pktbuf_alloc(&(smbus->binding), 0);
+	assert(smbus->rx_pkt);
+
+	if (mctp_pktbuf_push(smbus->rx_pkt, &smbus->rxbuf[sizeof(*smbus_hdr)],
+			     len - sizeof(*smbus_hdr) - SMBUS_PEC_BYTE_SIZE) !=
+	    0) {
+		mctp_prerr("Can't push tok pktbuf: %m");
+		return -1;
+	}
+
+	mctp_bus_rx(&(smbus->binding), smbus->rx_pkt);
+	smbus->rx_pkt = NULL;
+
+#ifdef I2C_M_HOLD
+	if (mctp_smbus_unhold_bus(smbus)) {
+		mctp_prerr("Can't hold mux");
+		return -1;
+	}
+#endif // I2C_M_HOLD
+
+	return len;
+}
+
+int mctp_smbus_get_in_fd(struct mctp_binding_smbus *smbus)
+{
+	return smbus->in_fd;
+}
+
+int mctp_smbus_set_in_fd(struct mctp_binding_smbus *smbus, int fd)
+{
+	smbus->in_fd = fd;
+}
+
+int mctp_smbus_set_out_fd(struct mctp_binding_smbus *smbus, int fd)
+{
+	smbus->out_fd = fd;
+}
+#endif
+
+void mctp_smbus_register_bus(struct mctp_binding_smbus *smbus,
+			     struct mctp *mctp, mctp_eid_t eid)
+{
+	smbus->bus_id = mctp_register_bus(mctp, &smbus->binding, eid);
+	mctp_binding_set_tx_enabled(&smbus->binding, true);
+}
+
+struct mctp_binding_smbus *mctp_smbus_init(void)
+{
+	struct mctp_binding_smbus *smbus;
+
+	smbus = __mctp_alloc(sizeof(*smbus));
+	memset(&(smbus->binding), 0, sizeof(smbus->binding));
+
+	smbus->in_fd = -1;
+	smbus->out_fd = -1;
+
+	smbus->rx_pkt = NULL;
+	smbus->binding.name = "smbus";
+	smbus->binding.version = 1;
+	smbus->binding.pkt_size = sizeof(smbus->rxbuf);
+
+	smbus->binding.tx = mctp_binding_smbus_tx;
+	return smbus;
+}
+
+void mctp_smbus_free(struct mctp_binding_smbus *smbus)
+{
+	if (!(smbus->in_fd < 0)) {
+		close(smbus->in_fd);
+	}
+	if (!(smbus->out_fd < 0)) {
+		close(smbus->out_fd);
+	}
+
+	__mctp_free(smbus);
+}
diff --git a/tests/test_smbus.c b/tests/test_smbus.c
new file mode 100644
index 0000000..1a177cb
--- /dev/null
+++ b/tests/test_smbus.c
@@ -0,0 +1,53 @@
+/* SPDX-License-Identifier: Apache-2.0 OR GPL-2.0-or-later */
+
+#define _GNU_SOURCE
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "libmctp-alloc.h"
+#include "libmctp-log.h"
+#include "libmctp-smbus.h"
+
+#ifdef NDEBUG
+#undef NDEBUG
+#endif
+
+#include <assert.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#define TEST_EID 7
+
+int main(void)
+{
+	int res;
+	struct mctp *mctp;
+	struct mctp_binding *binding;
+	struct mctp_pktbuf pkt;
+	struct mctp_binding_smbus *smbus;
+
+	mctp_set_log_stdio(MCTP_LOG_DEBUG);
+
+	mctp = mctp_init();
+	assert(mctp);
+	smbus = mctp_smbus_init();
+	assert(smbus);
+
+	assert(strcmp(smbus->binding.name, "smbus") == 0);
+	assert(smbus->binding.version == 1);
+	assert(smbus->binding.tx != NULL);
+	assert(smbus->binding.pkt_size == sizeof(smbus->rxbuf));
+
+	mctp_smbus_register_bus(smbus, mctp, TEST_EID);
+	assert(smbus->bus_id == 0);
+
+	/* cleanup */
+	mctp_smbus_free(smbus);
+	__mctp_free(mctp);
+
+	return 0;
+}
diff --git a/utils/mctp-demux-daemon.c b/utils/mctp-demux-daemon.c
index fc5d583..5b9a242 100644
--- a/utils/mctp-demux-daemon.c
+++ b/utils/mctp-demux-daemon.c
@@ -13,6 +13,10 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include <stdint.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <errno.h>
 
 #include <sys/socket.h>
 #include <sys/un.h>
@@ -20,11 +24,13 @@
 #include "libmctp.h"
 #include "libmctp-serial.h"
 #include "libmctp-astlpc.h"
+#include "libmctp-smbus.h"
+#include "libmctp-cmds.h"
 
 #define ARRAY_SIZE(a) (sizeof(a) / sizeof(a[0]))
 #define __unused __attribute__((unused))
 
-static const mctp_eid_t local_eid_default = 8;
+static const mctp_eid_t local_eid_default = 0;
 static char sockname[] = "\0mctp-mux";
 
 struct binding {
@@ -41,6 +47,7 @@ struct client {
 	bool		active;
 	int		sock;
 	uint8_t		type;
+	mctp_eid_t eid;
 };
 
 struct ctx {
@@ -90,6 +97,8 @@ static void rx_message(uint8_t eid, void *data, void *msg, size_t len)
 	uint8_t type;
 	int i, rc;
 
+	if (ctx->verbose)
+		printf("In rx_message eid:%d\n",eid);
 	if (len < 2)
 		return;
 
@@ -114,7 +123,7 @@ static void rx_message(uint8_t eid, void *data, void *msg, size_t len)
 			continue;
 
 		if (ctx->verbose)
-			fprintf(stderr, "  forwarding to client %d\n", i);
+			fprintf(stderr, " forwarding to client: %d\n", i);
 
 		rc = sendmsg(client->sock, &msghdr, 0);
 		if (rc != (ssize_t)(len + 1)) {
@@ -211,6 +220,94 @@ static int binding_astlpc_process(struct binding *binding)
 	return mctp_astlpc_poll(binding->data);
 }
 
+int i2c_slave_address_lookup(uint8_t dest, uint8_t *destSlaveAddr)
+{
+	warnx("In i2c_slave_address_lookup: MCTP dest EID: %d\n", dest);
+	*destSlaveAddr = (uint8_t)0x71;//7bit I2C slave address of MCTP device
+
+	return 1;
+}
+
+/* Create I2C slave mqueue
+ *address (7bit) 0x71 => (8bit) 0xE2
+ *	echo slave-mqueue 0x1071 > /sys/bus/i2c/devices/i2c-2/new_device
+ *
+ *address 8bit:0x30 7bit:0x18
+ *	echo slave-mqueue 0x1018 > /sys/bus/i2c/devices/i2c-2/new_device
+ *
+ *address 8bit:0x20 7bit:0x10
+ *	echo slave-mqueue 0x1010 > /sys/bus/i2c/devices/i2c-2/new_device
+ *
+ *You could dump rx buf via
+ *	hexdump -C /sys/bus/i2c/devices/2-1010/slave-mqueue
+ */
+static int binding_smbus_init(struct mctp *mctp, struct binding *binding,
+		mctp_eid_t eid, int n_params, char * const *params)
+{
+	struct mctp_binding_smbus *smbus;
+	char out_path[15]={0};
+	char in_path[50]={0};
+	int rc,fd;
+
+	// (7bit) 0x10 only respond to this address
+	//char i2c_in_file[50]={"/sys/bus/i2c/devices/2-1010/slave-mqueue"};
+	//char i2c_out_file[15]={"/dev/i2c-2"};
+
+	if (n_params != 2) {
+		warnx("smbus binding requires i2c bus num and slave address for mqueue");
+		return -1;
+	}
+
+	snprintf(out_path, 15, "/dev/i2c-%s", params[0]);
+	snprintf(in_path, 50, "/sys/bus/i2c/devices/%s-10%s/slave-mqueue", params[0], params[1]);
+
+	smbus = mctp_smbus_init();
+	assert(smbus);
+
+	fd = open(out_path, O_RDWR, 0);
+	if(fd < 0)
+	{
+		warnx("Opening I2C bus %s Failed\n",out_path);
+		return -1;
+	}
+	else
+	{
+		warnx("Opening I2C bus %s\n",out_path);
+		mctp_smbus_set_out_fd(smbus,fd);
+	}
+
+	fd = open(in_path, O_RDONLY | O_NONBLOCK);
+	if(fd < 0)
+	{
+		warnx(" Opening I2C bus %s Failed\n",in_path);
+		return -1;
+	}
+	else
+	{
+		warnx("Opening I2C bus %s\n",in_path);
+		mctp_smbus_set_in_fd(smbus,fd);
+	}
+
+	mctp_binding_set_slave_addr_callback(i2c_slave_address_lookup);
+
+	mctp_smbus_register_bus(smbus, mctp, eid);
+	assert(smbus->bus_id == 0);
+
+	binding->data = smbus;
+
+	return 0;
+}
+
+static int binding_smbus_get_in_fd(struct binding *binding)
+{
+	return mctp_smbus_get_in_fd(binding->data);
+}
+
+static int binding_smbus_process(struct binding *binding)
+{
+	return mctp_smbus_read(binding->data);
+}
+
 struct binding bindings[] = {
 	{
 		.name = "null",
@@ -227,6 +324,12 @@ struct binding bindings[] = {
 		.init = binding_astlpc_init,
 		.get_fd = binding_astlpc_get_fd,
 		.process = binding_astlpc_process,
+	},
+	{
+		.name = "smbus",
+		.init = binding_smbus_init,
+		.get_fd = binding_smbus_get_in_fd,
+		.process = binding_smbus_process,
 	}
 };
 
@@ -319,10 +422,12 @@ static int client_process_recv(struct ctx *ctx, int idx)
 			rc = -1;
 			goto out_close;
 		}
+
 		if (ctx->verbose)
 			fprintf(stderr, "client[%d] registered for type %u\n",
 					idx, type);
 		client->type = type;
+
 		return 0;
 	}
 
@@ -362,13 +467,17 @@ static int client_process_recv(struct ctx *ctx, int idx)
 	}
 
 	eid = *(uint8_t *)ctx->buf;
+	if (ctx->verbose)
+	{
+		warn("eid from client:%d\n",eid);
+		warn("ctx->local_eid:%d\n",ctx->local_eid);
+	}
 
 	if (ctx->verbose)
 		fprintf(stderr,
 			"client[%d] sent message: dest 0x%02x len %d\n",
 			idx, eid, rc - 1);
 
-
 	if (eid == ctx->local_eid)
 		rx_message(eid, ctx, ctx->buf + 1, rc - 1);
 	else
@@ -406,7 +515,7 @@ enum {
 static int run_daemon(struct ctx *ctx)
 {
 	bool clients_changed = false;
-	int rc, i;
+	int rc, i, connect_count=0;
 
 	ctx->pollfds = malloc(FD_NR * sizeof(struct pollfd));
 
@@ -427,7 +536,6 @@ static int run_daemon(struct ctx *ctx)
 	for (;;) {
 		if (clients_changed) {
 			int i;
-
 			ctx->pollfds = realloc(ctx->pollfds,
 					(ctx->n_clients + FD_NR) *
 						sizeof(struct pollfd));
@@ -443,7 +551,8 @@ static int run_daemon(struct ctx *ctx)
 		rc = poll(ctx->pollfds, ctx->n_clients + FD_NR, -1);
 		if (rc < 0) {
 			warn("poll failed");
-			break;
+			if(ctx->n_clients == 0)
+				break;
 		}
 
 		if (!rc)
@@ -451,10 +560,13 @@ static int run_daemon(struct ctx *ctx)
 
 		if (ctx->pollfds[FD_BINDING].revents) {
 			rc = 0;
-			if (ctx->binding->process)
+			if (ctx->binding->process){
 				rc = ctx->binding->process(ctx->binding);
-			if (rc)
-				break;
+			}
+			if (rc){
+				if(ctx->n_clients == 0)
+					break;
+			}
 		}
 
 		for (i = 0; i < ctx->n_clients; i++) {
@@ -468,19 +580,19 @@ static int run_daemon(struct ctx *ctx)
 
 		if (ctx->pollfds[FD_SOCKET].revents) {
 			rc = socket_process(ctx);
-			if (rc)
-				break;
+			if (rc){
+				printf("socket_process fail return:%d\n",rc);
+				if(ctx->n_clients == 0)
+					break;
+			}
 			clients_changed = true;
 		}
 
 		if (clients_changed)
 			client_remove_inactive(ctx);
-
 	}
 
-
 	free(ctx->pollfds);
-
 	return rc;
 }
 
@@ -544,12 +656,16 @@ int main(int argc, char * const *argv)
 	assert(ctx->mctp);
 
 	rc = binding_init(ctx, argv[optind], argc - optind - 1, argv + optind + 1);
-	if (rc)
+	if (rc){
+		warn("binding_init failed");
 		return EXIT_FAILURE;
+	}
 
 	rc = socket_init(ctx);
-	if (rc)
+	if (rc){
+		warn("socket_init failed");
 		return EXIT_FAILURE;
+	}
 
 	rc = run_daemon(ctx);
 
