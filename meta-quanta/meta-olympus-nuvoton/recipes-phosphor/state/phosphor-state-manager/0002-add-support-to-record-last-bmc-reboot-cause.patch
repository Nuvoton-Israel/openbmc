From dca7c3ba3d958a7596b90e1ce741791e66f5bb3a Mon Sep 17 00:00:00 2001
From: Tim Lee <timlee660101@gmail.com>
Date: Tue, 16 Mar 2021 16:33:09 +0800
Subject: [PATCH 2/2] add support to record last bmc reboot cause

Signed-off-by: Tim Lee <timlee660101@gmail.com>
---
 bmc_state_manager.cpp | 48 +++++++++++++++++++++++++++++++++++++++++++
 bmc_state_manager.hpp |  9 ++++++++
 meson.build           | 10 +++++++++
 meson_options.txt     | 30 +++++++++++++++++++++++++++
 4 files changed, 97 insertions(+)

diff --git a/bmc_state_manager.cpp b/bmc_state_manager.cpp
index 3fbe4bf..dd335a3 100644
--- a/bmc_state_manager.cpp
+++ b/bmc_state_manager.cpp
@@ -1,3 +1,5 @@
+#include "config.h"
+
 #include "bmc_state_manager.hpp"
 
 #include "xyz/openbmc_project/Common/error.hpp"
@@ -10,6 +12,10 @@
 
 #include <cassert>
 
+#include <filesystem>
+#include <fstream>
+#include <iostream>
+
 namespace phosphor
 {
 namespace state
@@ -231,6 +237,15 @@ BMC::BMCState BMC::currentBMCState(BMCState value)
     return server::BMC::currentBMCState(value);
 }
 
+BMC::RebootCause BMC::lastRebootCause(RebootCause value)
+{
+    log<level::INFO>(
+        "Setting the RebootCause field",
+        entry("LAST_REBOOT_CAUSE=0x%s", convertForMessage(value).c_str()));
+
+    return server::BMC::lastRebootCause(value);
+}
+
 uint64_t BMC::lastRebootTime() const
 {
     using namespace std::chrono;
@@ -246,6 +261,39 @@ uint64_t BMC::lastRebootTime() const
     return duration_cast<milliseconds>(rebootTime.time_since_epoch()).count();
 }
 
+void BMC::discoverLastRebootCause()
+{
+    uint64_t bootstatus = 0;
+    std::ifstream file;
+    std::string path = std::string{WATCHDOG_BOOTSTATUS_SYSFS_PATH};
+
+    file.exceptions(std::ifstream::failbit | std::ifstream::badbit |
+                    std::ifstream::eofbit);
+
+    try
+    {
+        file.open(path);
+        file >> bootstatus;
+    }
+    catch (std::exception& e)
+    {
+        auto rc = errno;
+        log<level::ERR>((std::string("Failed to read sysfs file "
+                                     "errno=") +
+                         std::to_string(rc) + " FILENAME=" + path)
+                            .c_str());
+    }
+
+    if (bootstatus == WDIOF_EXTERN1)
+        this->lastRebootCause(RebootCause::Watchdog);
+    else if (bootstatus == WDIOF_CARDRESET)
+        this->lastRebootCause(RebootCause::POR);
+    else
+        this->lastRebootCause(RebootCause::Unknown);
+
+    return;
+}
+
 } // namespace manager
 } // namespace state
 } // namespace phosphor
diff --git a/bmc_state_manager.hpp b/bmc_state_manager.hpp
index cf53795..9389087 100644
--- a/bmc_state_manager.hpp
+++ b/bmc_state_manager.hpp
@@ -43,6 +43,7 @@ class BMC : public BMCInherit
     {
         subscribeToSystemdSignals();
         discoverInitialState();
+        discoverLastRebootCause();
         this->emit_object_added();
     };
 
@@ -62,6 +63,9 @@ class BMC : public BMCInherit
      */
     uint64_t lastRebootTime() const override;
 
+    /** @brief Set value of LastRebootCause **/
+    RebootCause lastRebootCause(RebootCause value) override;
+
   private:
     /**
      * @brief discover the state of the bmc
@@ -94,6 +98,11 @@ class BMC : public BMCInherit
 
     /** @brief Used to subscribe to dbus system state changes **/
     std::unique_ptr<sdbusplus::bus::match_t> stateSignal;
+
+    /**
+     * @brief discover the last reboot cause of the bmc
+     **/
+    void discoverLastRebootCause();
 };
 
 } // namespace manager
diff --git a/meson.build b/meson.build
index 610b4ba..fecb047 100644
--- a/meson.build
+++ b/meson.build
@@ -35,6 +35,16 @@ conf.set_quoted(
     'SCHEDULED_HOST_TRANSITION_PERSIST_PATH', get_option('scheduled-host-transition-persist-path'))
 conf.set_quoted(
     'SCHEDULED_HOST_TRANSITION_BUSNAME', get_option('scheduled-host-transition-busname'))
+conf.set_quoted(
+    'WATCHDOG_BOOTSTATUS_SYSFS_PATH', get_option('watchdog-bootstatus-sysfs-path'))
+conf.set_quoted(
+    'REBOOT_CAUSE_WATCHDOG', get_option('reboot-cause-watchdog'))
+conf.set_quoted(
+    'REBOOT_CAUSE_POWER_ON_RESET', get_option('reboot-cause-power-on-reset'))
+conf.set(
+    'WDIOF_EXTERN1', get_option('wdiof-extern1'))
+conf.set(
+    'WDIOF_CARDRESET', get_option('wdiof-cardreset'))
 conf.set(
     'BOOT_COUNT_MAX_ALLOWED', get_option('boot-count-max-allowed'))
 conf.set(
diff --git a/meson_options.txt b/meson_options.txt
index 9412421..9434880 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -88,3 +88,33 @@ option('warm-reboot', type : 'feature',
     value : 'enabled',
     description : 'Enable warm reboots of the system',
 )
+
+option(
+    'watchdog-bootstatus-sysfs-path', type: 'string',
+    value: '/sys/class/watchdog/watchdog0/bootstatus',
+    description: 'The watchdog bootstatus sysfs path.',
+)
+
+option(
+    'reboot-cause-watchdog', type: 'string',
+    value: 'xyz.openbmc_project.State.BMC.RebootCause.Watchdog',
+    description: 'The last reboot cause is watchdog.',
+)
+
+option(
+    'reboot-cause-power-on-reset', type: 'string',
+    value: 'xyz.openbmc_project.State.BMC.RebootCause.POR',
+    description: 'The last reboot cause is power-on-reset.',
+)
+
+option(
+    'wdiof-extern1', type: 'integer',
+    value: 4,
+    description: 'External monitoring relay/source 1 was triggered.',
+)
+
+option(
+    'wdiof-cardreset', type: 'integer',
+    value: 32,
+    description: 'Watchdog card previously reset the CPU was triggered.',
+)
-- 
2.17.1

