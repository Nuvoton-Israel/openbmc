From 91e42550cf9e760b702314a4f04f966622981453 Mon Sep 17 00:00:00 2001
From: Tim Lee <timlee660101@gmail.com>
Date: Fri, 4 Mar 2022 11:59:39 +0800
Subject: [PATCH 4/5] bmcweb: chassis: add indicatorLED support

Signed-off-by: Tim Lee <timlee660101@gmail.com>
---
 redfish-core/lib/chassis.hpp | 107 +++++++++++++++++++++++++++++++++--
 1 file changed, 102 insertions(+), 5 deletions(-)

diff --git a/redfish-core/lib/chassis.hpp b/redfish-core/lib/chassis.hpp
index 47b507005..d8fdbca53 100644
--- a/redfish-core/lib/chassis.hpp
+++ b/redfish-core/lib/chassis.hpp
@@ -133,6 +133,73 @@ inline void getPhysicalSecurityData(std::shared_ptr<bmcweb::AsyncResp> aResp)
         std::array<const char*, 1>{"xyz.openbmc_project.Chassis.Intrusion"});
 }
 
+/**
+ * Retrieves physical Led properties over dbus
+ */
+void getPhysicalLedData(std::shared_ptr<bmcweb::AsyncResp> aResp, std::string path)
+{
+    std::size_t found = path.rfind('/');
+    std::string led_name;
+
+    if (found != std::string::npos)
+    {
+        led_name = path.substr(found + 1);
+    }
+    else
+    {
+        return;
+    }
+
+    std::string obj = "xyz.openbmc_project.LED.Controller." + led_name;
+
+    crow::connections::systemBus->async_method_call(
+        [aResp](const boost::system::error_code ec,
+                              const dbus::utility::DBusPropertiesMap& properties) {
+            if (ec)
+            {
+                BMCWEB_LOG_DEBUG << "DBUS response error " << ec;
+                messages::internalError(aResp->res);
+                return;
+            }
+            BMCWEB_LOG_DEBUG << "Got " << properties.size()
+                             << " led properties.";
+            std::string output;
+            for (const auto &property : properties)
+            {
+                if (property.first == "State")
+                {
+                    const std::string *s =
+                        std::get_if<std::string>(&property.second);
+                    if (nullptr != s)
+                    {
+                        BMCWEB_LOG_DEBUG << "Identify Led State: " << *s;
+                        const auto pos = s->rfind('.');
+                        if (pos != std::string::npos)
+                        {
+                            auto led = s->substr(pos + 1);
+                            for (const std::pair<const char *, const char *>
+                                     &p :
+                                 std::array<
+                                     std::pair<const char *, const char *>, 3>{
+                                     {{"On", "Lit"},
+                                      {"Blink", "Blinking"},
+                                      {"Off", "Off"}}})
+                            {
+                                if (led == p.first)
+                                {
+                                    aResp->res.jsonValue["IndicatorLED"] = p.second;
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        },
+        obj, path,
+        "org.freedesktop.DBus.Properties", "GetAll",
+        "xyz.openbmc_project.Led.Physical");
+}
+
 /**
  * ChassisCollection derived class for delivering Chassis Collection Schema
  *  Functions triggers appropriate requests on DBus
@@ -253,21 +320,51 @@ inline void requestRoutesChassis(App& app)
                         auto health =
                             std::make_shared<HealthPopulate>(asyncResp);
 
+                        // Get the list of all sensors for this Chassis element
+                        std::vector<std::string> sensorPaths = {
+                            "/all_sensors",
+                            "/sensors"
+                        };
+
+                        for (const std::string& sensorPath : sensorPaths)
+                        {
+                            crow::connections::systemBus->async_method_call(
+                                [health](const boost::system::error_code ec,
+                                        std::variant<std::vector<std::string>> &resp) {
+                                    if (ec)
+                                    {
+                                        return; // no sensors = no failures
+                                    }
+                                    std::vector<std::string> *data =
+                                        std::get_if<std::vector<std::string>>(&resp);
+                                    if (data == nullptr)
+                                    {
+                                        return;
+                                    }
+                                    health->inventory = std::move(*data);
+                                },
+                                "xyz.openbmc_project.ObjectMapper",
+                                path + sensorPath,
+                                "org.freedesktop.DBus.Properties", "Get",
+                                "xyz.openbmc_project.Association", "endpoints");
+                        }
+
+                        health->populate();
+
                         sdbusplus::asio::getProperty<std::vector<std::string>>(
                             *crow::connections::systemBus,
                             "xyz.openbmc_project.ObjectMapper",
-                            path + "/all_sensors",
+                            path + "/leds",
                             "xyz.openbmc_project.Association", "endpoints",
-                            [health](const boost::system::error_code ec2,
+                            [asyncResp](const boost::system::error_code ec2,
                                      const std::vector<std::string>& resp) {
                                 if (ec2)
                                 {
                                     return; // no sensors = no failures
                                 }
-                                health->inventory = resp;
-                            });
 
-                        health->populate();
+                                getPhysicalLedData(asyncResp, resp[0]);
+                            });
 
                         if (connectionNames.empty())
                         {
-- 
2.17.1

